
ex2_Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000948  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ff  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b1  00000000  00000000  00001247  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  000015f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000344  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  000019c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	b5 00       	.word	0x00b5	; ????
  56:	b8 00       	.word	0x00b8	; ????
  58:	bb 00       	.word	0x00bb	; ????
  5a:	be 00       	.word	0x00be	; ????
  5c:	c1 00       	.word	0x00c1	; ????
  5e:	c4 00       	.word	0x00c4	; ????
  60:	c7 00       	.word	0x00c7	; ????
  62:	ca 00       	.word	0x00ca	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d4 e0       	ldi	r29, 0x04	; 4
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  74:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <usart_init>:
 */ 

#include <avr/io.h>

void usart_init(void){
	UCSRA = 0; //Initialize USCRA as 0
  7c:	1b b8       	out	0x0b, r1	; 11
	// Activate transmitter receiver
	UCSRB = (1 << RXEN) | (1<< TXEN);
  7e:	88 e1       	ldi	r24, 0x18	; 24
  80:	8a b9       	out	0x0a, r24	; 10
	//Baud rate = 9600
	UBRRH = 0;
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL = 51;
  84:	83 e3       	ldi	r24, 0x33	; 51
  86:	89 b9       	out	0x09, r24	; 9
	// 8 bit character size 1 stop bit
	UCSRC = (1 << URSEL) | (3 << UCSZ0);
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
  8c:	08 95       	ret

0000008e <usart_transmit>:
}

void usart_transmit(unsigned char byte){
	while(!(UCSRA & (1 << UDRE)));
  8e:	5d 9b       	sbis	0x0b, 5	; 11
  90:	fe cf       	rjmp	.-4      	; 0x8e <usart_transmit>
	UDR = byte;
  92:	8c b9       	out	0x0c, r24	; 12
  94:	08 95       	ret

00000096 <usart_receive>:
}
unsigned char  usart_receive(void ){
	while(!(UCSRA &(1 << RXC)));
  96:	5f 9b       	sbis	0x0b, 7	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <usart_receive>
	return  UDR;
  9a:	8c b1       	in	r24, 0x0c	; 12
}
  9c:	08 95       	ret

0000009e <print_invalid>:

void  print_invalid(void){
	usart_transmit('I');
  9e:	89 e4       	ldi	r24, 0x49	; 73
  a0:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('n');
  a4:	8e e6       	ldi	r24, 0x6E	; 110
  a6:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('v');
  aa:	86 e7       	ldi	r24, 0x76	; 118
  ac:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('a');
  b0:	81 e6       	ldi	r24, 0x61	; 97
  b2:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('l');
  b6:	8c e6       	ldi	r24, 0x6C	; 108
  b8:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('i');
  bc:	89 e6       	ldi	r24, 0x69	; 105
  be:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('d');
  c2:	84 e6       	ldi	r24, 0x64	; 100
  c4:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit(' ');
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('N');
  ce:	8e e4       	ldi	r24, 0x4E	; 78
  d0:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('u');
  d4:	85 e7       	ldi	r24, 0x75	; 117
  d6:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('m');
  da:	8d e6       	ldi	r24, 0x6D	; 109
  dc:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('b');
  e0:	82 e6       	ldi	r24, 0x62	; 98
  e2:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('e');
  e6:	85 e6       	ldi	r24, 0x65	; 101
  e8:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('r');
  ec:	82 e7       	ldi	r24, 0x72	; 114
  ee:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit(0x00);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
  f8:	08 95       	ret

000000fa <print_number>:
}
void  print_number(unsigned char number){
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	usart_transmit('N');
  fe:	8e e4       	ldi	r24, 0x4E	; 78
 100:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('u');
 104:	85 e7       	ldi	r24, 0x75	; 117
 106:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('m');
 10a:	8d e6       	ldi	r24, 0x6D	; 109
 10c:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('b');
 110:	82 e6       	ldi	r24, 0x62	; 98
 112:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('e');
 116:	85 e6       	ldi	r24, 0x65	; 101
 118:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('r');
 11c:	82 e7       	ldi	r24, 0x72	; 114
 11e:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit(' ');	
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('R');
 128:	82 e5       	ldi	r24, 0x52	; 82
 12a:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('e');
 12e:	85 e6       	ldi	r24, 0x65	; 101
 130:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('a');
 134:	81 e6       	ldi	r24, 0x61	; 97
 136:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit('d');
 13a:	84 e6       	ldi	r24, 0x64	; 100
 13c:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit(':');
 140:	8a e3       	ldi	r24, 0x3A	; 58
 142:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit(0x00);
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
	usart_transmit(number);
 14c:	8c 2f       	mov	r24, r28
 14e:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
}
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <turn_on_leds>:
void turn_on_leds(unsigned char input){
switch (input){
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	f1 97       	sbiw	r30, 0x31	; 49
 15c:	e8 30       	cpi	r30, 0x08	; 8
 15e:	f1 05       	cpc	r31, r1
 160:	d8 f4       	brcc	.+54     	; 0x198 <turn_on_leds+0x42>
 162:	e6 5d       	subi	r30, 0xD6	; 214
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	0c 94 ef 00 	jmp	0x1de	; 0x1de <__tablejump2__>
	case '1':
	PORTB = 0x01;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	88 bb       	out	0x18, r24	; 24
	break;
 16e:	08 95       	ret
	case '2':
	PORTB = 0x03;
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	88 bb       	out	0x18, r24	; 24
	break;
 174:	08 95       	ret
	case '3':
	PORTB = 0X07;
 176:	87 e0       	ldi	r24, 0x07	; 7
 178:	88 bb       	out	0x18, r24	; 24
	break;
 17a:	08 95       	ret
	case '4':
	PORTB = 0x0F;
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	88 bb       	out	0x18, r24	; 24
	break;
 180:	08 95       	ret
	case '5':
	PORTB = 0X1F;
 182:	8f e1       	ldi	r24, 0x1F	; 31
 184:	88 bb       	out	0x18, r24	; 24
	break;
 186:	08 95       	ret
	case '6':
	PORTB = 0X3F;
 188:	8f e3       	ldi	r24, 0x3F	; 63
 18a:	88 bb       	out	0x18, r24	; 24
	break;
 18c:	08 95       	ret
	case '7':
	PORTB = 0X7F;
 18e:	8f e7       	ldi	r24, 0x7F	; 127
 190:	88 bb       	out	0x18, r24	; 24
	break;
 192:	08 95       	ret
	case '8':
	PORTB = 0xFF;
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	88 bb       	out	0x18, r24	; 24
 198:	08 95       	ret

0000019a <main>:
}
return;
}
int main(void)
{   unsigned char input;
	DDRB = 0xFF;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	87 bb       	out	0x17, r24	; 23
	usart_init();
 19e:	0e 94 3e 00 	call	0x7c	; 0x7c <usart_init>
     while (1) 
    {
		input = usart_receive();
 1a2:	0e 94 4b 00 	call	0x96	; 0x96 <usart_receive>
 1a6:	c8 2f       	mov	r28, r24
		if(input == '9'){
 1a8:	89 33       	cpi	r24, 0x39	; 57
 1aa:	31 f4       	brne	.+12     	; 0x1b8 <main+0x1e>
			print_invalid();
 1ac:	0e 94 4f 00 	call	0x9e	; 0x9e <print_invalid>
			usart_transmit(0x0d);
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
 1b6:	f5 cf       	rjmp	.-22     	; 0x1a2 <main+0x8>
		}
		else if(input== '0'){
 1b8:	80 33       	cpi	r24, 0x30	; 48
 1ba:	41 f4       	brne	.+16     	; 0x1cc <main+0x32>
			print_number(input);
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	0e 94 7d 00 	call	0xfa	; 0xfa <print_number>
			usart_transmit(0x0d);
 1c2:	8d e0       	ldi	r24, 0x0D	; 13
 1c4:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
			PORTB = 0X00;
 1c8:	18 ba       	out	0x18, r1	; 24
 1ca:	eb cf       	rjmp	.-42     	; 0x1a2 <main+0x8>
		}
		else{
			print_number(input);
 1cc:	0e 94 7d 00 	call	0xfa	; 0xfa <print_number>
			usart_transmit(0x0d);
 1d0:	8d e0       	ldi	r24, 0x0D	; 13
 1d2:	0e 94 47 00 	call	0x8e	; 0x8e <usart_transmit>
			turn_on_leds(input);	
 1d6:	8c 2f       	mov	r24, r28
 1d8:	0e 94 ab 00 	call	0x156	; 0x156 <turn_on_leds>
 1dc:	e2 cf       	rjmp	.-60     	; 0x1a2 <main+0x8>

000001de <__tablejump2__>:
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	05 90       	lpm	r0, Z+
 1e4:	f4 91       	lpm	r31, Z
 1e6:	e0 2d       	mov	r30, r0
 1e8:	09 94       	ijmp

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
