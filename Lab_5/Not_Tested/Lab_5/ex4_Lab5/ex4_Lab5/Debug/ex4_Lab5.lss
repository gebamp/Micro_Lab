
ex4_Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000701  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ee  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002de  00000000  00000000  00000f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000364  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015a  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000171e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usart_init>:
	UDR = byte;
}
unsigned char  usart_receive(void ){
	while(!(UCSRA &(1 << RXC)));
	return  UDR;
}
  6c:	1b b8       	out	0x0b, r1	; 11
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
  72:	10 bc       	out	0x20, r1	; 32
  74:	83 e3       	ldi	r24, 0x33	; 51
  76:	89 b9       	out	0x09, r24	; 9
  78:	86 e8       	ldi	r24, 0x86	; 134
  7a:	80 bd       	out	0x20, r24	; 32
  7c:	08 95       	ret

0000007e <usart_transmit>:
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <usart_transmit>
  82:	8c b9       	out	0x0c, r24	; 12
  84:	08 95       	ret

00000086 <ADC_init>:
void ADC_init(void){
	ADMUX  = (1 << REFS0);
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1 << ADEN) | (1<< ADPS2) | (1 <<  ADPS1) | (1 << ADPS0) ;
  8a:	87 e8       	ldi	r24, 0x87	; 135
  8c:	86 b9       	out	0x06, r24	; 6
  8e:	08 95       	ret

00000090 <main>:
	return ; 
}
int main(void)
{	unsigned char voltage_input_high,voltage_input_low,first_digit=0,second_digit=0;
	unsigned int voltage_input ;
	usart_init();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <usart_init>
	ADC_init();
  94:	0e 94 43 00 	call	0x86	; 0x86 <ADC_init>
	ADMUX  = (1 << REFS0);
	ADCSRA = (1 << ADEN) | (1<< ADPS2) | (1 <<  ADPS1) | (1 << ADPS0) ;
	return ; 
}
int main(void)
{	unsigned char voltage_input_high,voltage_input_low,first_digit=0,second_digit=0;
  98:	c0 e0       	ldi	r28, 0x00	; 0
  9a:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned int voltage_input ;
	usart_init();
	ADC_init();
     while (1) 
    {
		 ADCSRA |= (1 << ADSC);
  9c:	36 9a       	sbi	0x06, 6	; 6
		 while ( (ADCSRA & 0X70) == 0x70 );
  9e:	86 b1       	in	r24, 0x06	; 6
  a0:	80 77       	andi	r24, 0x70	; 112
  a2:	80 37       	cpi	r24, 0x70	; 112
  a4:	e1 f3       	breq	.-8      	; 0x9e <main+0xe>
		 voltage_input_low  = ADCL;
  a6:	94 b1       	in	r25, 0x04	; 4
		 voltage_input_high = ADCH;
  a8:	85 b1       	in	r24, 0x05	; 5
		 voltage_input_high = (voltage_input_high << 7);   
		 voltage_input = voltage_input_high | voltage_input_low ; 
  aa:	87 95       	ror	r24
  ac:	88 27       	eor	r24, r24
  ae:	87 95       	ror	r24
  b0:	89 2b       	or	r24, r25
  b2:	90 e0       	ldi	r25, 0x00	; 0
		 voltage_input = voltage_input * 5;
  b4:	9c 01       	movw	r18, r24
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	82 0f       	add	r24, r18
  c0:	93 1f       	adc	r25, r19
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <main+0x44>
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	4f 5f       	subi	r20, 0xFF	; 255
  d2:	5f 4f       	sbci	r21, 0xFF	; 255
		 for(int i =0;i<10;i++){
			 voltage_input = voltage_input >>1;
  d4:	96 95       	lsr	r25
  d6:	87 95       	ror	r24
			 if(i==7){
  d8:	27 30       	cpi	r18, 0x07	; 7
  da:	31 05       	cpc	r19, r1
  dc:	21 f4       	brne	.+8      	; 0xe6 <main+0x56>
			 second_digit = '5';
			 if((voltage_input & 0x01)!=1){
  de:	80 fd       	sbrc	r24, 0
  e0:	1f c0       	rjmp	.+62     	; 0x120 <main+0x90>
				second_digit = '0';
  e2:	c0 e3       	ldi	r28, 0x30	; 48
  e4:	f3 cf       	rjmp	.-26     	; 0xcc <main+0x3c>
			 }
			 continue;
			 }
			 else if (i==8){
  e6:	28 30       	cpi	r18, 0x08	; 8
  e8:	31 05       	cpc	r19, r1
  ea:	21 f4       	brne	.+8      	; 0xf4 <main+0x64>
				first_digit = '7';
				if((voltage_input & 0x01)!=1){
  ec:	80 fd       	sbrc	r24, 0
  ee:	1a c0       	rjmp	.+52     	; 0x124 <main+0x94>
					first_digit = '0';
  f0:	d0 e3       	ldi	r29, 0x30	; 48
  f2:	ec cf       	rjmp	.-40     	; 0xcc <main+0x3c>
		 voltage_input_low  = ADCL;
		 voltage_input_high = ADCH;
		 voltage_input_high = (voltage_input_high << 7);   
		 voltage_input = voltage_input_high | voltage_input_low ; 
		 voltage_input = voltage_input * 5;
		 for(int i =0;i<10;i++){
  f4:	4a 30       	cpi	r20, 0x0A	; 10
  f6:	51 05       	cpc	r21, r1
  f8:	4c f3       	brlt	.-46     	; 0xcc <main+0x3c>
				}
				continue; 
			 }
		 }
		 
		 usart_transmit(voltage_input + 0x30);
  fa:	80 5d       	subi	r24, 0xD0	; 208
  fc:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_transmit>
		 usart_transmit('.');
 100:	8e e2       	ldi	r24, 0x2E	; 46
 102:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_transmit>
		 usart_transmit(first_digit);
 106:	8d 2f       	mov	r24, r29
 108:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_transmit>
		 usart_transmit(second_digit);
 10c:	8c 2f       	mov	r24, r28
 10e:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_transmit>
		 usart_transmit('V');
 112:	86 e5       	ldi	r24, 0x56	; 86
 114:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_transmit>
		 usart_transmit(0x0D);
 118:	8d e0       	ldi	r24, 0x0D	; 13
 11a:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_transmit>
		 
    } 
 11e:	be cf       	rjmp	.-132    	; 0x9c <main+0xc>
		 voltage_input = voltage_input_high | voltage_input_low ; 
		 voltage_input = voltage_input * 5;
		 for(int i =0;i<10;i++){
			 voltage_input = voltage_input >>1;
			 if(i==7){
			 second_digit = '5';
 120:	c5 e3       	ldi	r28, 0x35	; 53
 122:	d4 cf       	rjmp	.-88     	; 0xcc <main+0x3c>
				second_digit = '0';
			 }
			 continue;
			 }
			 else if (i==8){
				first_digit = '7';
 124:	d7 e3       	ldi	r29, 0x37	; 55
 126:	d2 cf       	rjmp	.-92     	; 0xcc <main+0x3c>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
