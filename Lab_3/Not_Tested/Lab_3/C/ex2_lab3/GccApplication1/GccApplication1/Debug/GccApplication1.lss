
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000400  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c73  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b8  00000000  00000000  00001147  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066f  00000000  00000000  000017ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001e70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d7  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000941  00000000  00000000  0000241b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  74:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <scan_row>:
#include <util/delay.h>

int _tmp_=0x0000;
int scan_row(char row_nr)
{
	char row = 0x08 << row_nr;
  7c:	28 e0       	ldi	r18, 0x08	; 8
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <scan_row+0xa>
  82:	22 0f       	add	r18, r18
  84:	33 1f       	adc	r19, r19
  86:	8a 95       	dec	r24
  88:	e2 f7       	brpl	.-8      	; 0x82 <scan_row+0x6>
	PORTC = row;
  8a:	25 bb       	out	0x15, r18	; 21
	asm volatile ("nop");
  8c:	00 00       	nop
	asm volatile ("nop");
  8e:	00 00       	nop
	return (PINC & 0x0f);
  90:	83 b3       	in	r24, 0x13	; 19
  92:	8f 70       	andi	r24, 0x0F	; 15
}
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 95       	ret

00000098 <scan_keypad>:

int scan_keypad()
{
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
	int temp = scan_row(4) | (scan_row(3)<<4) | (scan_row(2)<<8) | (scan_row(1)<<12);
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
  a6:	ec 01       	movw	r28, r24
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
  ae:	8c 01       	movw	r16, r24
  b0:	82 e0       	ldi	r24, 0x02	; 2
  b2:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
  b6:	02 95       	swap	r16
  b8:	12 95       	swap	r17
  ba:	10 7f       	andi	r17, 0xF0	; 240
  bc:	10 27       	eor	r17, r16
  be:	00 7f       	andi	r16, 0xF0	; 240
  c0:	10 27       	eor	r17, r16
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	38 2f       	mov	r19, r24
  c8:	20 2b       	or	r18, r16
  ca:	31 2b       	or	r19, r17
  cc:	c2 2b       	or	r28, r18
  ce:	d3 2b       	or	r29, r19
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	return temp;
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	38 2f       	mov	r19, r24
  dc:	32 95       	swap	r19
  de:	30 7f       	andi	r19, 0xF0	; 240
}
  e0:	c9 01       	movw	r24, r18
  e2:	8c 2b       	or	r24, r28
  e4:	9d 2b       	or	r25, r29
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	08 95       	ret

000000f0 <scan_keypad_rising_edge>:

int scan_keypad_rising_edge()
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
	int first_scan = scan_keypad();
  f4:	0e 94 4c 00 	call	0x98	; 0x98 <scan_keypad>
  f8:	ec 01       	movw	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f e7       	ldi	r18, 0x7F	; 127
  fc:	88 e3       	ldi	r24, 0x38	; 56
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <scan_keypad_rising_edge+0x10>
 108:	00 c0       	rjmp	.+0      	; 0x10a <scan_keypad_rising_edge+0x1a>
 10a:	00 00       	nop
	_delay_ms(50);
	
	int second_scan = scan_keypad();
 10c:	0e 94 4c 00 	call	0x98	; 0x98 <scan_keypad>
	
	int next_tmp_state = first_scan & second_scan;
 110:	8c 23       	and	r24, r28
 112:	9d 23       	and	r25, r29
	
	int final_result = next_tmp_state & ~(_tmp_);
 114:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11c:	20 95       	com	r18
 11e:	30 95       	com	r19
	
	_tmp_=next_tmp_state;
 120:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>

	return final_result;
}
 128:	82 23       	and	r24, r18
 12a:	93 23       	and	r25, r19
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <keypad_to_ascii>:

char keypad_to_ascii(int keypad)
{
	if((keypad&0x0001)==0x0001) return 'E';
 132:	80 fd       	sbrc	r24, 0
 134:	20 c0       	rjmp	.+64     	; 0x176 <keypad_to_ascii+0x44>
	if((keypad&0x0002)==0x0002) return '0';
 136:	81 fd       	sbrc	r24, 1
 138:	20 c0       	rjmp	.+64     	; 0x17a <keypad_to_ascii+0x48>
	if((keypad&0x0004)==0x0004) return 'F';
 13a:	82 fd       	sbrc	r24, 2
 13c:	20 c0       	rjmp	.+64     	; 0x17e <keypad_to_ascii+0x4c>
	if((keypad&0x0008)==0x0008) return 'D';
 13e:	83 fd       	sbrc	r24, 3
 140:	20 c0       	rjmp	.+64     	; 0x182 <keypad_to_ascii+0x50>
	if((keypad&0x0010)==0x0010) return '7';
 142:	84 fd       	sbrc	r24, 4
 144:	20 c0       	rjmp	.+64     	; 0x186 <keypad_to_ascii+0x54>
	if((keypad&0x0020)==0x0020) return '8';
 146:	85 fd       	sbrc	r24, 5
 148:	20 c0       	rjmp	.+64     	; 0x18a <keypad_to_ascii+0x58>
	if((keypad&0x0040)==0x0040) return '9';
 14a:	86 fd       	sbrc	r24, 6
 14c:	20 c0       	rjmp	.+64     	; 0x18e <keypad_to_ascii+0x5c>
	if((keypad&0x0080)==0x0080) return 'C';
 14e:	87 fd       	sbrc	r24, 7
 150:	20 c0       	rjmp	.+64     	; 0x192 <keypad_to_ascii+0x60>
	if((keypad&0x0100)==0x0100) return '4';
 152:	90 fd       	sbrc	r25, 0
 154:	20 c0       	rjmp	.+64     	; 0x196 <keypad_to_ascii+0x64>
	if((keypad&0x0200)==0x0200) return '5';
 156:	91 fd       	sbrc	r25, 1
 158:	20 c0       	rjmp	.+64     	; 0x19a <keypad_to_ascii+0x68>
	if((keypad&0x0400)==0x0400) return '6';
 15a:	92 fd       	sbrc	r25, 2
 15c:	20 c0       	rjmp	.+64     	; 0x19e <keypad_to_ascii+0x6c>
	if((keypad&0x0800)==0x0800) return 'B';
 15e:	93 fd       	sbrc	r25, 3
 160:	20 c0       	rjmp	.+64     	; 0x1a2 <keypad_to_ascii+0x70>
	if((keypad&0x1000)==0x1000) return '1';
 162:	94 fd       	sbrc	r25, 4
 164:	20 c0       	rjmp	.+64     	; 0x1a6 <keypad_to_ascii+0x74>
	if((keypad&0x2000)==0x2000) return '2';
 166:	95 fd       	sbrc	r25, 5
 168:	20 c0       	rjmp	.+64     	; 0x1aa <keypad_to_ascii+0x78>
	if((keypad&0x4000)==0x4000) return '3';
 16a:	96 fd       	sbrc	r25, 6
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <keypad_to_ascii+0x7c>
	if((keypad&0x8000)==0x8000) return 'A';
 16e:	99 23       	and	r25, r25
 170:	04 f1       	brlt	.+64     	; 0x1b2 <keypad_to_ascii+0x80>
	return 0x00;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	08 95       	ret
	return final_result;
}

char keypad_to_ascii(int keypad)
{
	if((keypad&0x0001)==0x0001) return 'E';
 176:	85 e4       	ldi	r24, 0x45	; 69
 178:	08 95       	ret
	if((keypad&0x0002)==0x0002) return '0';
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	08 95       	ret
	if((keypad&0x0004)==0x0004) return 'F';
 17e:	86 e4       	ldi	r24, 0x46	; 70
 180:	08 95       	ret
	if((keypad&0x0008)==0x0008) return 'D';
 182:	84 e4       	ldi	r24, 0x44	; 68
 184:	08 95       	ret
	if((keypad&0x0010)==0x0010) return '7';
 186:	87 e3       	ldi	r24, 0x37	; 55
 188:	08 95       	ret
	if((keypad&0x0020)==0x0020) return '8';
 18a:	88 e3       	ldi	r24, 0x38	; 56
 18c:	08 95       	ret
	if((keypad&0x0040)==0x0040) return '9';
 18e:	89 e3       	ldi	r24, 0x39	; 57
 190:	08 95       	ret
	if((keypad&0x0080)==0x0080) return 'C';
 192:	83 e4       	ldi	r24, 0x43	; 67
 194:	08 95       	ret
	if((keypad&0x0100)==0x0100) return '4';
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	08 95       	ret
	if((keypad&0x0200)==0x0200) return '5';
 19a:	85 e3       	ldi	r24, 0x35	; 53
 19c:	08 95       	ret
	if((keypad&0x0400)==0x0400) return '6';
 19e:	86 e3       	ldi	r24, 0x36	; 54
 1a0:	08 95       	ret
	if((keypad&0x0800)==0x0800) return 'B';
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	08 95       	ret
	if((keypad&0x1000)==0x1000) return '1';
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	08 95       	ret
	if((keypad&0x2000)==0x2000) return '2';
 1aa:	82 e3       	ldi	r24, 0x32	; 50
 1ac:	08 95       	ret
	if((keypad&0x4000)==0x4000) return '3';
 1ae:	83 e3       	ldi	r24, 0x33	; 51
 1b0:	08 95       	ret
	if((keypad&0x8000)==0x8000) return 'A';
 1b2:	81 e4       	ldi	r24, 0x41	; 65
	return 0x00;
	
}
 1b4:	08 95       	ret

000001b6 <keypad_to_hex>:
char keypad_to_hex(int keypad)
{
	if((keypad&0x0001)==0x0001) return 0x0E;
 1b6:	80 fd       	sbrc	r24, 0
 1b8:	20 c0       	rjmp	.+64     	; 0x1fa <keypad_to_hex+0x44>
	if((keypad&0x0002)==0x0002) return 0x00;
 1ba:	81 fd       	sbrc	r24, 1
 1bc:	20 c0       	rjmp	.+64     	; 0x1fe <keypad_to_hex+0x48>
	if((keypad&0x0004)==0x0004) return 0x0F;
 1be:	82 fd       	sbrc	r24, 2
 1c0:	20 c0       	rjmp	.+64     	; 0x202 <keypad_to_hex+0x4c>
	if((keypad&0x0008)==0x0008) return 0x0D;
 1c2:	83 fd       	sbrc	r24, 3
 1c4:	20 c0       	rjmp	.+64     	; 0x206 <keypad_to_hex+0x50>
	if((keypad&0x0010)==0x0010) return 0x07;
 1c6:	84 fd       	sbrc	r24, 4
 1c8:	20 c0       	rjmp	.+64     	; 0x20a <keypad_to_hex+0x54>
	if((keypad&0x0020)==0x0020) return 0x08;
 1ca:	85 fd       	sbrc	r24, 5
 1cc:	20 c0       	rjmp	.+64     	; 0x20e <keypad_to_hex+0x58>
	if((keypad&0x0040)==0x0040) return 0x09;
 1ce:	86 fd       	sbrc	r24, 6
 1d0:	20 c0       	rjmp	.+64     	; 0x212 <keypad_to_hex+0x5c>
	if((keypad&0x0080)==0x0080) return 0x0C;
 1d2:	87 fd       	sbrc	r24, 7
 1d4:	20 c0       	rjmp	.+64     	; 0x216 <keypad_to_hex+0x60>
	if((keypad&0x0100)==0x0100) return 0x04;
 1d6:	90 fd       	sbrc	r25, 0
 1d8:	20 c0       	rjmp	.+64     	; 0x21a <keypad_to_hex+0x64>
	if((keypad&0x0200)==0x0200) return 0x05;
 1da:	91 fd       	sbrc	r25, 1
 1dc:	20 c0       	rjmp	.+64     	; 0x21e <keypad_to_hex+0x68>
	if((keypad&0x0400)==0x0400) return 0x06;
 1de:	92 fd       	sbrc	r25, 2
 1e0:	20 c0       	rjmp	.+64     	; 0x222 <keypad_to_hex+0x6c>
	if((keypad&0x0800)==0x0800) return 0x0B;
 1e2:	93 fd       	sbrc	r25, 3
 1e4:	20 c0       	rjmp	.+64     	; 0x226 <keypad_to_hex+0x70>
	if((keypad&0x1000)==0x1000) return 0x01;
 1e6:	94 fd       	sbrc	r25, 4
 1e8:	20 c0       	rjmp	.+64     	; 0x22a <keypad_to_hex+0x74>
	if((keypad&0x2000)==0x2000) return 0x02;
 1ea:	95 fd       	sbrc	r25, 5
 1ec:	20 c0       	rjmp	.+64     	; 0x22e <keypad_to_hex+0x78>
	if((keypad&0x4000)==0x4000) return 0x03;
 1ee:	96 fd       	sbrc	r25, 6
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <keypad_to_hex+0x7c>
	if((keypad&0x8000)==0x8000) return 0x0A;
 1f2:	99 23       	and	r25, r25
 1f4:	04 f1       	brlt	.+64     	; 0x236 <keypad_to_hex+0x80>
	return 0x10;
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	08 95       	ret
	return 0x00;
	
}
char keypad_to_hex(int keypad)
{
	if((keypad&0x0001)==0x0001) return 0x0E;
 1fa:	8e e0       	ldi	r24, 0x0E	; 14
 1fc:	08 95       	ret
	if((keypad&0x0002)==0x0002) return 0x00;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
	if((keypad&0x0004)==0x0004) return 0x0F;
 202:	8f e0       	ldi	r24, 0x0F	; 15
 204:	08 95       	ret
	if((keypad&0x0008)==0x0008) return 0x0D;
 206:	8d e0       	ldi	r24, 0x0D	; 13
 208:	08 95       	ret
	if((keypad&0x0010)==0x0010) return 0x07;
 20a:	87 e0       	ldi	r24, 0x07	; 7
 20c:	08 95       	ret
	if((keypad&0x0020)==0x0020) return 0x08;
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	08 95       	ret
	if((keypad&0x0040)==0x0040) return 0x09;
 212:	89 e0       	ldi	r24, 0x09	; 9
 214:	08 95       	ret
	if((keypad&0x0080)==0x0080) return 0x0C;
 216:	8c e0       	ldi	r24, 0x0C	; 12
 218:	08 95       	ret
	if((keypad&0x0100)==0x0100) return 0x04;
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	08 95       	ret
	if((keypad&0x0200)==0x0200) return 0x05;
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	08 95       	ret
	if((keypad&0x0400)==0x0400) return 0x06;
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	08 95       	ret
	if((keypad&0x0800)==0x0800) return 0x0B;
 226:	8b e0       	ldi	r24, 0x0B	; 11
 228:	08 95       	ret
	if((keypad&0x1000)==0x1000) return 0x01;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	08 95       	ret
	if((keypad&0x2000)==0x2000) return 0x02;
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	08 95       	ret
	if((keypad&0x4000)==0x4000) return 0x03;
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	08 95       	ret
	if((keypad&0x8000)==0x8000) return 0x0A;
 236:	8a e0       	ldi	r24, 0x0A	; 10
	return 0x10;
	
}
 238:	08 95       	ret

0000023a <write_2_nibbles>:
void write_2_nibbles(unsigned char input)
{   unsigned char r25,low_nibble;
	unsigned char first_input,second_input,low_to_high_nibble;
	r25 = (PIND & 0X0F);
 23a:	90 b3       	in	r25, 0x10	; 16
 23c:	9f 70       	andi	r25, 0x0F	; 15
	// Get the 4 msb of input and send to Port_D
	first_input = (input & 0xF0) | r25;
 23e:	28 2f       	mov	r18, r24
 240:	20 7f       	andi	r18, 0xF0	; 240
 242:	29 2b       	or	r18, r25
	PORTD = first_input;
 244:	22 bb       	out	0x12, r18	; 18
	PORTD = PORTD | (1 << PD3);
 246:	93 9a       	sbi	0x12, 3	; 18
	PORTD = PORTD &(0 << PD3);
 248:	22 b3       	in	r18, 0x12	; 18
 24a:	12 ba       	out	0x12, r1	; 18
	//Get the 4 lsb and send them to portd as msb
	low_nibble =  input & 0x0F;
	low_to_high_nibble = (low_nibble <<4);
	second_input = low_to_high_nibble | r25;
 24c:	82 95       	swap	r24
 24e:	80 7f       	andi	r24, 0xF0	; 240
 250:	98 2b       	or	r25, r24
	PORTD = second_input;
 252:	92 bb       	out	0x12, r25	; 18
	PORTD = PORTD |(1 << PD3);
 254:	93 9a       	sbi	0x12, 3	; 18
	PORTD = PORTD &(0 << PD3);
 256:	82 b3       	in	r24, 0x12	; 18
 258:	12 ba       	out	0x12, r1	; 18
	PORTC=0X01;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	85 bb       	out	0x15, r24	; 21
 25e:	08 95       	ret

00000260 <lcd_data>:
	return ;
}
void lcd_data(unsigned char input){
	PORTD = (1 << PD2 );
 260:	94 e0       	ldi	r25, 0x04	; 4
 262:	92 bb       	out	0x12, r25	; 18
	write_2_nibbles(input);
 264:	0e 94 1d 01 	call	0x23a	; 0x23a <write_2_nibbles>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	82 e7       	ldi	r24, 0x72	; 114
 26a:	8a 95       	dec	r24
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_data+0xa>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_data+0x10>
 270:	08 95       	ret

00000272 <lcd_command>:
	_delay_us(43);
	return ;
}

void lcd_command(unsigned char command){
	PORTD = (0 << PD2);
 272:	12 ba       	out	0x12, r1	; 18
	write_2_nibbles(command);
 274:	0e 94 1d 01 	call	0x23a	; 0x23a <write_2_nibbles>
 278:	88 e6       	ldi	r24, 0x68	; 104
 27a:	8a 95       	dec	r24
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_command+0x8>
 27e:	08 95       	ret

00000280 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	89 ef       	ldi	r24, 0xF9	; 249
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <lcd_init+0x6>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <lcd_init+0x10>
 290:	00 00       	nop
	_delay_us(39);
	return ;
}
void lcd_init(){
	_delay_ms(40);
	PORTD = 0x30;
 292:	80 e3       	ldi	r24, 0x30	; 48
 294:	82 bb       	out	0x12, r24	; 18
	PORTD =PORTD|(1 << PD3);
 296:	93 9a       	sbi	0x12, 3	; 18
	PORTD =PORTD & (0 << PD3);
 298:	92 b3       	in	r25, 0x12	; 18
 29a:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	28 e6       	ldi	r18, 0x68	; 104
 29e:	2a 95       	dec	r18
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_init+0x1e>
	_delay_us(39);

	PORTD = 0x30;
 2a2:	82 bb       	out	0x12, r24	; 18
	PORTD = PORTD| (1 << PD3);
 2a4:	93 9a       	sbi	0x12, 3	; 18
	PORTD = PORTD & (0 << PD3);
 2a6:	82 b3       	in	r24, 0x12	; 18
 2a8:	12 ba       	out	0x12, r1	; 18
 2aa:	88 e6       	ldi	r24, 0x68	; 104
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_init+0x2c>
	_delay_us(39);


	PORTD = 0x20;
 2b0:	80 e2       	ldi	r24, 0x20	; 32
 2b2:	82 bb       	out	0x12, r24	; 18
	PORTD = PORTD| (1 << PD3);
 2b4:	93 9a       	sbi	0x12, 3	; 18
	PORTD = PORTD &(0 << PD3);
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	12 ba       	out	0x12, r1	; 18
 2ba:	98 e6       	ldi	r25, 0x68	; 104
 2bc:	9a 95       	dec	r25
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_init+0x3c>
	_delay_us(39);

	lcd_command(0x28);
 2c0:	88 e2       	ldi	r24, 0x28	; 40
 2c2:	0e 94 39 01 	call	0x272	; 0x272 <lcd_command>
	lcd_command(0x0c);
 2c6:	8c e0       	ldi	r24, 0x0C	; 12
 2c8:	0e 94 39 01 	call	0x272	; 0x272 <lcd_command>
	lcd_command(0x01);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 39 01 	call	0x272	; 0x272 <lcd_command>
 2d2:	83 ef       	ldi	r24, 0xF3	; 243
 2d4:	9b e0       	ldi	r25, 0x0B	; 11
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_init+0x56>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_init+0x5c>
 2dc:	00 00       	nop
	_delay_us(1530);
	
	lcd_command(0x06);
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	0e 94 39 01 	call	0x272	; 0x272 <lcd_command>
 2e4:	08 95       	ret

000002e6 <main>:
int main(void){
	unsigned int  first_key, second_key;
	unsigned char first_number,second_number;
	unsigned char first_number_in_hex,second_number_in_hex,final_number_in_hex;
	unsigned char ekatondades=0,dekades=0,monades=0,sign;
	DDRB = 0xFF;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xF0;
 2ea:	80 ef       	ldi	r24, 0xF0	; 240
 2ec:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 2ee:	0e 94 40 01 	call	0x280	; 0x280 <lcd_init>

int main(void){
	unsigned int  first_key, second_key;
	unsigned char first_number,second_number;
	unsigned char first_number_in_hex,second_number_in_hex,final_number_in_hex;
	unsigned char ekatondades=0,dekades=0,monades=0,sign;
 2f2:	10 e0       	ldi	r17, 0x00	; 0
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB = 0xFF;
	DDRC = 0xF0;
	lcd_init();
	while(1){
		_tmp_ = 0x0000;
 2f6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2fa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		first_number = scan_keypad_rising_edge();
 2fe:	0e 94 78 00 	call	0xf0	; 0xf0 <scan_keypad_rising_edge>
 302:	7c 01       	movw	r14, r24
		second_number=scan_keypad_rising_edge();
 304:	0e 94 78 00 	call	0xf0	; 0xf0 <scan_keypad_rising_edge>
 308:	6c 01       	movw	r12, r24
        while((first_key = keypad_to_ascii(first_number)) == 0x00);
 30a:	c7 01       	movw	r24, r14
 30c:	99 27       	eor	r25, r25
 30e:	0e 94 99 00 	call	0x132	; 0x132 <keypad_to_ascii>
 312:	c8 2f       	mov	r28, r24
 314:	cc 23       	and	r28, r28
 316:	f1 f3       	breq	.-4      	; 0x314 <main+0x2e>
 318:	dd 24       	eor	r13, r13
        while((second_key = keypad_to_ascii(second_number)) == 0x00);
 31a:	c6 01       	movw	r24, r12
 31c:	0e 94 99 00 	call	0x132	; 0x132 <keypad_to_ascii>
 320:	08 2f       	mov	r16, r24
 322:	00 23       	and	r16, r16
 324:	f1 f3       	breq	.-4      	; 0x322 <main+0x3c>
		first_number_in_hex =( keypad_to_ascii(first_number) << 4);
		second_number_in_hex= keypad_to_hex(second_number);
 326:	c6 01       	movw	r24, r12
 328:	0e 94 db 00 	call	0x1b6	; 0x1b6 <keypad_to_hex>
 32c:	f8 2e       	mov	r15, r24
		
		lcd_command(0x02);
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	0e 94 39 01 	call	0x272	; 0x272 <lcd_command>
		lcd_data(first_key);
 334:	8c 2f       	mov	r24, r28
 336:	0e 94 30 01 	call	0x260	; 0x260 <lcd_data>
		lcd_data(second_key);
 33a:	80 2f       	mov	r24, r16
 33c:	0e 94 30 01 	call	0x260	; 0x260 <lcd_data>
		lcd_data('=');
 340:	8d e3       	ldi	r24, 0x3D	; 61
 342:	0e 94 30 01 	call	0x260	; 0x260 <lcd_data>
		final_number_in_hex = first_number_in_hex | second_number_in_hex;
 346:	c2 95       	swap	r28
 348:	c0 7f       	andi	r28, 0xF0	; 240
 34a:	cf 29       	or	r28, r15
		if((final_number_in_hex & 0x80) == 0x80){
 34c:	14 f0       	brlt	.+4      	; 0x352 <main+0x6c>
			sign = '-' ;
		}
		else{
			sign = '+' ;
 34e:	8b e2       	ldi	r24, 0x2B	; 43
 350:	01 c0       	rjmp	.+2      	; 0x354 <main+0x6e>
		lcd_data(first_key);
		lcd_data(second_key);
		lcd_data('=');
		final_number_in_hex = first_number_in_hex | second_number_in_hex;
		if((final_number_in_hex & 0x80) == 0x80){
			sign = '-' ;
 352:	8d e2       	ldi	r24, 0x2D	; 45
		}
		else{
			sign = '+' ;
		}
		while(final_number_in_hex>=10){
 354:	ca 30       	cpi	r28, 0x0A	; 10
 356:	48 f0       	brcs	.+18     	; 0x36a <main+0x84>
			if(final_number_in_hex >=100){
 358:	c4 36       	cpi	r28, 0x64	; 100
 35a:	18 f0       	brcs	.+6      	; 0x362 <main+0x7c>
				ekatondades = 1;
				final_number_in_hex = final_number_in_hex -100;
 35c:	c4 56       	subi	r28, 0x64	; 100
		else{
			sign = '+' ;
		}
		while(final_number_in_hex>=10){
			if(final_number_in_hex >=100){
				ekatondades = 1;
 35e:	d1 e0       	ldi	r29, 0x01	; 1
 360:	02 c0       	rjmp	.+4      	; 0x366 <main+0x80>
				final_number_in_hex = final_number_in_hex -100;
			}
			else{
				dekades++;
 362:	1f 5f       	subi	r17, 0xFF	; 255
				final_number_in_hex = final_number_in_hex -10;
 364:	ca 50       	subi	r28, 0x0A	; 10
			sign = '-' ;
		}
		else{
			sign = '+' ;
		}
		while(final_number_in_hex>=10){
 366:	ca 30       	cpi	r28, 0x0A	; 10
 368:	b8 f7       	brcc	.-18     	; 0x358 <main+0x72>
				dekades++;
				final_number_in_hex = final_number_in_hex -10;

			}
		}
		ekatondades = ekatondades + 48;
 36a:	d0 5d       	subi	r29, 0xD0	; 208
		dekades = dekades + 48;
 36c:	10 5d       	subi	r17, 0xD0	; 208
		monades = final_number_in_hex + 48;
		lcd_data(sign);
 36e:	0e 94 30 01 	call	0x260	; 0x260 <lcd_data>
		lcd_data(ekatondades);
 372:	8d 2f       	mov	r24, r29
 374:	0e 94 30 01 	call	0x260	; 0x260 <lcd_data>
		lcd_data(dekades);
 378:	81 2f       	mov	r24, r17
 37a:	0e 94 30 01 	call	0x260	; 0x260 <lcd_data>
		lcd_data(monades);
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	8c 0f       	add	r24, r28
 382:	0e 94 30 01 	call	0x260	; 0x260 <lcd_data>

	}
 386:	b7 cf       	rjmp	.-146    	; 0x2f6 <main+0x10>

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
