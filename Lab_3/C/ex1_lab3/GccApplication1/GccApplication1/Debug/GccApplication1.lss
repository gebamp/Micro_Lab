
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000002d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099f  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b3  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048a  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000497  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000494  00000000  00000000  00001d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002213  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  74:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <scan_row>:
unsigned char keypad[2];
unsigned int previous_state;
unsigned char scan_row(int line){
	unsigned char switch_state;
	unsigned char r25 = (1 << 3);
	r25 = (r25 << line);
  7c:	28 e0       	ldi	r18, 0x08	; 8
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <scan_row+0xa>
  82:	22 0f       	add	r18, r18
  84:	33 1f       	adc	r19, r19
  86:	8a 95       	dec	r24
  88:	e2 f7       	brpl	.-8      	; 0x82 <scan_row+0x6>
	PORTC = r25;
  8a:	25 bb       	out	0x15, r18	; 21
	asm volatile(
  8c:	00 00       	nop
  8e:	00 00       	nop
	"nop" "\n"
	"nop" "\n");
	switch_state = PINC;
  90:	93 b3       	in	r25, 0x13	; 19
	return  (switch_state && 0x0F);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	91 11       	cpse	r25, r1
  96:	01 c0       	rjmp	.+2      	; 0x9a <scan_row+0x1e>
  98:	80 e0       	ldi	r24, 0x00	; 0
}
  9a:	08 95       	ret

0000009c <scan_keypad>:
void  scan_keypad(){
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
	unsigned char first_line,second_line,third_line,fourth_line;
	unsigned char first_and_second, third_and_fourth;
	// Scan the first and second lines and store the output in keypad[1] global variable
	first_line  = scan_row(1);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	first_line  = (first_line  & 0x0F) << 4 ;
  ac:	90 e1       	ldi	r25, 0x10	; 16
  ae:	89 9f       	mul	r24, r25
  b0:	e0 01       	movw	r28, r0
  b2:	11 24       	eor	r1, r1
	second_line = scan_row(2);
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	second_line = (second_line & 0x0F);
	first_and_second = first_line | second_line;
	keypad[1]  = first_and_second;
  bc:	02 e6       	ldi	r16, 0x62	; 98
  be:	10 e0       	ldi	r17, 0x00	; 0
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	c8 2b       	or	r28, r24
  c4:	f8 01       	movw	r30, r16
  c6:	c1 83       	std	Z+1, r28	; 0x01
	// Scan the third and fourth lines and store the output in keypad[0] global variable
	third_line  = scan_row(3);
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	third_line  = (third_line  & 0x0F) << 4;
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	e0 01       	movw	r28, r0
  d6:	11 24       	eor	r1, r1
	fourth_line = scan_row(4);
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	fourth_line = (fourth_line & 0x0F);
	third_and_fourth = third_line | fourth_line ;
	keypad[0] = third_and_fourth;
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	c8 2b       	or	r28, r24
  e4:	f8 01       	movw	r30, r16
  e6:	c0 83       	st	Z, r28
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	08 95       	ret

000000f2 <scan_keypad_rising_edge>:
unsigned int scan_keypad_rising_edge(){
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	int final_output;
	unsigned int temp_2_output_1,temp_2_output_2;
	unsigned int temp_final_output_2,temp_final_output,temp_output_1,temp_output_2;
	unsigned char save_keyboard[2],save_keyboard_2[2];
	// Scan keyboard for the first time
	scan_keypad();
  fa:	0e 94 4e 00 	call	0x9c	; 0x9c <scan_keypad>
	save_keyboard[0] = keypad[0];
  fe:	e2 e6       	ldi	r30, 0x62	; 98
 100:	f0 e0       	ldi	r31, 0x00	; 0
	save_keyboard[1] = keypad[1];
	temp_output_1 = save_keyboard[1] << 8;
	temp_output_2 = save_keyboard[0];
 102:	c0 81       	ld	r28, Z
 104:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the output of the final in one integer(16 bit)
	temp_final_output =( temp_output_1 | temp_output_2 );
 106:	81 81       	ldd	r24, Z+1	; 0x01
 108:	8e 01       	movw	r16, r28
 10a:	18 2b       	or	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f e1       	ldi	r24, 0x1F	; 31
 10e:	9e e4       	ldi	r25, 0x4E	; 78
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <scan_keypad_rising_edge+0x1e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <scan_keypad_rising_edge+0x24>
 116:	00 00       	nop

	// Delay for debouncing effect
	_delay_ms(0x0A);

	// Scan keypad again
	scan_keypad();
 118:	0e 94 4e 00 	call	0x9c	; 0x9c <scan_keypad>
	temp_final_output_2 =( temp_2_output_1 | temp_2_output_2 );

	// Decline  debouncing keys
	temp_final_output_2 = temp_final_output & temp_final_output;
	// Load previous state in registers
	temp_final_output = previous_state;
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	// Refresh previous state with fresh pushed keys
	previous_state = temp_output_2;
 124:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 128:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Reverse previous state
	temp_final_output = ~temp_final_output;
	// Find just presed keys
	final_output = temp_final_output & temp_final_output_2;
return final_output;}
 12c:	80 95       	com	r24
 12e:	90 95       	com	r25
 130:	80 23       	and	r24, r16
 132:	91 23       	and	r25, r17
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <keypad_to_ascii>:

unsigned char keypad_to_ascii(){
	if((keypad[0] & 0x01) ==  0x01){
 13e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <keypad>
 142:	80 fd       	sbrc	r24, 0
 144:	23 c0       	rjmp	.+70     	; 0x18c <keypad_to_ascii+0x4e>
	return '*';}
	if((keypad[0] & 0x02) ==  0x02){
 146:	81 fd       	sbrc	r24, 1
 148:	23 c0       	rjmp	.+70     	; 0x190 <keypad_to_ascii+0x52>
	return '0';}
	if((keypad[0] & 0x04) ==  0x04){
 14a:	82 fd       	sbrc	r24, 2
 14c:	23 c0       	rjmp	.+70     	; 0x194 <keypad_to_ascii+0x56>
	return '#';}
	if((keypad[0] & 0x08) ==  0x08){
 14e:	83 fd       	sbrc	r24, 3
 150:	23 c0       	rjmp	.+70     	; 0x198 <keypad_to_ascii+0x5a>
	return 'D';}
	if((keypad[0] & 0x10) ==  0x10){
 152:	84 fd       	sbrc	r24, 4
 154:	23 c0       	rjmp	.+70     	; 0x19c <keypad_to_ascii+0x5e>
	return '7';}
	if((keypad[0] & 0x20) ==  0x20){
 156:	85 fd       	sbrc	r24, 5
 158:	23 c0       	rjmp	.+70     	; 0x1a0 <keypad_to_ascii+0x62>
	return '8';}
	if((keypad[0] & 0x40) ==  0x40){
 15a:	86 fd       	sbrc	r24, 6
 15c:	23 c0       	rjmp	.+70     	; 0x1a4 <keypad_to_ascii+0x66>
	return '9';}
	if((keypad[0] & 0x80) ==  0x80){
 15e:	88 23       	and	r24, r24
 160:	1c f1       	brlt	.+70     	; 0x1a8 <keypad_to_ascii+0x6a>
	return 'C';}
	if((keypad[1] & 0x01) ==  0x01){
 162:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <keypad+0x1>
 166:	90 fd       	sbrc	r25, 0
 168:	21 c0       	rjmp	.+66     	; 0x1ac <keypad_to_ascii+0x6e>
	return '4';}
	if((keypad[1] & 0x02) ==  0x02){
 16a:	91 fd       	sbrc	r25, 1
 16c:	21 c0       	rjmp	.+66     	; 0x1b0 <keypad_to_ascii+0x72>
	return '5';}
	if((keypad[1] & 0x04) ==  0x04){
 16e:	92 fd       	sbrc	r25, 2
 170:	21 c0       	rjmp	.+66     	; 0x1b4 <keypad_to_ascii+0x76>
	return '6';}
	if((keypad[1] & 0x08) ==  0x08){
 172:	93 fd       	sbrc	r25, 3
 174:	21 c0       	rjmp	.+66     	; 0x1b8 <keypad_to_ascii+0x7a>
	return 'B';}
	if((keypad[1] & 0x10) ==  0x10){
 176:	94 fd       	sbrc	r25, 4
 178:	21 c0       	rjmp	.+66     	; 0x1bc <keypad_to_ascii+0x7e>
	return '1';}
	if((keypad[1] & 0x20) ==  0x20){
 17a:	95 fd       	sbrc	r25, 5
 17c:	21 c0       	rjmp	.+66     	; 0x1c0 <keypad_to_ascii+0x82>
	return '2';}
	if((keypad[1] & 0x40) ==  0x40){
 17e:	89 2f       	mov	r24, r25
 180:	80 74       	andi	r24, 0x40	; 64
 182:	96 fd       	sbrc	r25, 6
 184:	1f c0       	rjmp	.+62     	; 0x1c4 <keypad_to_ascii+0x86>
	return '3';}
	if((keypad[1] & 0x80) ==  0x80){
 186:	99 23       	and	r25, r25
 188:	04 f5       	brge	.+64     	; 0x1ca <keypad_to_ascii+0x8c>
 18a:	1e c0       	rjmp	.+60     	; 0x1c8 <keypad_to_ascii+0x8a>
	final_output = temp_final_output & temp_final_output_2;
return final_output;}

unsigned char keypad_to_ascii(){
	if((keypad[0] & 0x01) ==  0x01){
	return '*';}
 18c:	8a e2       	ldi	r24, 0x2A	; 42
 18e:	08 95       	ret
	if((keypad[0] & 0x02) ==  0x02){
	return '0';}
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	08 95       	ret
	if((keypad[0] & 0x04) ==  0x04){
	return '#';}
 194:	83 e2       	ldi	r24, 0x23	; 35
 196:	08 95       	ret
	if((keypad[0] & 0x08) ==  0x08){
	return 'D';}
 198:	84 e4       	ldi	r24, 0x44	; 68
 19a:	08 95       	ret
	if((keypad[0] & 0x10) ==  0x10){
	return '7';}
 19c:	87 e3       	ldi	r24, 0x37	; 55
 19e:	08 95       	ret
	if((keypad[0] & 0x20) ==  0x20){
	return '8';}
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	08 95       	ret
	if((keypad[0] & 0x40) ==  0x40){
	return '9';}
 1a4:	89 e3       	ldi	r24, 0x39	; 57
 1a6:	08 95       	ret
	if((keypad[0] & 0x80) ==  0x80){
	return 'C';}
 1a8:	83 e4       	ldi	r24, 0x43	; 67
 1aa:	08 95       	ret
	if((keypad[1] & 0x01) ==  0x01){
	return '4';}
 1ac:	84 e3       	ldi	r24, 0x34	; 52
 1ae:	08 95       	ret
	if((keypad[1] & 0x02) ==  0x02){
	return '5';}
 1b0:	85 e3       	ldi	r24, 0x35	; 53
 1b2:	08 95       	ret
	if((keypad[1] & 0x04) ==  0x04){
	return '6';}
 1b4:	86 e3       	ldi	r24, 0x36	; 54
 1b6:	08 95       	ret
	if((keypad[1] & 0x08) ==  0x08){
	return 'B';}
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	08 95       	ret
	if((keypad[1] & 0x10) ==  0x10){
	return '1';}
 1bc:	81 e3       	ldi	r24, 0x31	; 49
 1be:	08 95       	ret
	if((keypad[1] & 0x20) ==  0x20){
	return '2';}
 1c0:	82 e3       	ldi	r24, 0x32	; 50
 1c2:	08 95       	ret
	if((keypad[1] & 0x40) ==  0x40){
	return '3';}
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	08 95       	ret
	if((keypad[1] & 0x80) ==  0x80){
	return 'A';}
 1c8:	81 e4       	ldi	r24, 0x41	; 65
return 0x00;}
 1ca:	08 95       	ret

000001cc <main>:


int main(void){
	unsigned int  first_key , second_key;
	unsigned char first_number=0x00,second_number=0x00;
	DDRB = 0xFF;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xF0;
 1d0:	80 ef       	ldi	r24, 0xF0	; 240
 1d2:	84 bb       	out	0x14, r24	; 20
	while(1){
		previous_state = 0x0000;
		do{
			first_key = scan_keypad_rising_edge();
			keypad[0] = first_key & 0x00FF;
 1d4:	c2 e6       	ldi	r28, 0x62	; 98
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(4000);
			PORTB = 0X00;
		}
		else{
			for(int i=0;i<8;i++){
				PORTB =0XFF;
 1d8:	0f ef       	ldi	r16, 0xFF	; 255
	unsigned int  first_key , second_key;
	unsigned char first_number=0x00,second_number=0x00;
	DDRB = 0xFF;
	DDRC = 0xF0;
	while(1){
		previous_state = 0x0000;
 1da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		do{
			first_key = scan_keypad_rising_edge();
 1e2:	0e 94 79 00 	call	0xf2	; 0xf2 <scan_keypad_rising_edge>
			keypad[0] = first_key & 0x00FF;
 1e6:	88 83       	st	Y, r24
			keypad[1] = first_key & 0xFF00;
 1e8:	19 82       	std	Y+1, r1	; 0x01
			first_number = keypad_to_ascii();
 1ea:	0e 94 9f 00 	call	0x13e	; 0x13e <keypad_to_ascii>
 1ee:	18 2f       	mov	r17, r24
		}while(first_number==0x00);
 1f0:	88 23       	and	r24, r24
 1f2:	b9 f3       	breq	.-18     	; 0x1e2 <main+0x16>
		do{
			//isos thelei ena temp save
			second_key = scan_keypad_rising_edge();
 1f4:	0e 94 79 00 	call	0xf2	; 0xf2 <scan_keypad_rising_edge>
			keypad[0] = second_key & 0x00FF;
 1f8:	88 83       	st	Y, r24
			keypad[1] = second_key & 0xFF00;
 1fa:	19 82       	std	Y+1, r1	; 0x01
			second_number = keypad_to_ascii();
 1fc:	0e 94 9f 00 	call	0x13e	; 0x13e <keypad_to_ascii>
		}while(second_number==0x00);
 200:	88 23       	and	r24, r24
 202:	c1 f3       	breq	.-16     	; 0x1f4 <main+0x28>
		if(first_number == '0' && second_number=='9'){
 204:	10 33       	cpi	r17, 0x30	; 48
 206:	71 f4       	brne	.+28     	; 0x224 <main+0x58>
 208:	89 33       	cpi	r24, 0x39	; 57
 20a:	79 f4       	brne	.+30     	; 0x22a <main+0x5e>
			PORTB = 0XFF;
 20c:	08 bb       	out	0x18, r16	; 24
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	37 ea       	ldi	r19, 0xA7	; 167
 212:	41 e6       	ldi	r20, 0x61	; 97
 214:	21 50       	subi	r18, 0x01	; 1
 216:	30 40       	sbci	r19, 0x00	; 0
 218:	40 40       	sbci	r20, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x48>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x52>
 21e:	00 00       	nop
			_delay_ms(4000);
			PORTB = 0X00;
 220:	18 ba       	out	0x18, r1	; 24
 222:	db cf       	rjmp	.-74     	; 0x1da <main+0xe>
 224:	88 e0       	ldi	r24, 0x08	; 8
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <main+0x62>
 22a:	88 e0       	ldi	r24, 0x08	; 8
 22c:	90 e0       	ldi	r25, 0x00	; 0
		}
		else{
			for(int i=0;i<8;i++){
				PORTB =0XFF;
 22e:	08 bb       	out	0x18, r16	; 24
 230:	2f e7       	ldi	r18, 0x7F	; 127
 232:	3a e1       	ldi	r19, 0x1A	; 26
 234:	46 e0       	ldi	r20, 0x06	; 6
 236:	21 50       	subi	r18, 0x01	; 1
 238:	30 40       	sbci	r19, 0x00	; 0
 23a:	40 40       	sbci	r20, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x6a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x74>
 240:	00 00       	nop
				_delay_ms(250);
				PORTB = 0X00;
 242:	18 ba       	out	0x18, r1	; 24
 244:	2f e7       	ldi	r18, 0x7F	; 127
 246:	3a e1       	ldi	r19, 0x1A	; 26
 248:	46 e0       	ldi	r20, 0x06	; 6
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	30 40       	sbci	r19, 0x00	; 0
 24e:	40 40       	sbci	r20, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x7e>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x88>
 254:	00 00       	nop
 256:	01 97       	sbiw	r24, 0x01	; 1
			PORTB = 0XFF;
			_delay_ms(4000);
			PORTB = 0X00;
		}
		else{
			for(int i=0;i<8;i++){
 258:	51 f7       	brne	.-44     	; 0x22e <main+0x62>
 25a:	bf cf       	rjmp	.-130    	; 0x1da <main+0xe>

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
