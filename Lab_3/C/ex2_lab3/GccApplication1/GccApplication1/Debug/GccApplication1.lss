
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d21  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006fa  00000000  00000000  00001215  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c3  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000674  00000000  00000000  00002627  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002c9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7f 01 	call	0x2fe	; 0x2fe <main>
  74:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <scan_row>:
unsigned char keypad[2];
unsigned int previous_state;
unsigned char scan_row(int line){
	unsigned char switch_state;
	unsigned char r25 = (1 << 3);
	r25 = (r25 << line);
  7c:	28 e0       	ldi	r18, 0x08	; 8
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <scan_row+0xa>
  82:	22 0f       	add	r18, r18
  84:	33 1f       	adc	r19, r19
  86:	8a 95       	dec	r24
  88:	e2 f7       	brpl	.-8      	; 0x82 <scan_row+0x6>
	PORTC = r25;
  8a:	25 bb       	out	0x15, r18	; 21
	asm volatile(
  8c:	00 00       	nop
  8e:	00 00       	nop
	"nop" "\n"
	"nop" "\n");
	switch_state = PINC;
  90:	93 b3       	in	r25, 0x13	; 19
	return  (switch_state && 0x0F);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	91 11       	cpse	r25, r1
  96:	01 c0       	rjmp	.+2      	; 0x9a <scan_row+0x1e>
  98:	80 e0       	ldi	r24, 0x00	; 0
}
  9a:	08 95       	ret

0000009c <scan_keypad>:
void  scan_keypad(){
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
	unsigned char first_line,second_line,third_line,fourth_line;
	unsigned char first_and_second, third_and_fourth;
	// Scan the first and second lines and store the output in keypad[1] global variable
	first_line  = scan_row(1);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	first_line  = (first_line  & 0x0F) << 4 ;
  ac:	90 e1       	ldi	r25, 0x10	; 16
  ae:	89 9f       	mul	r24, r25
  b0:	e0 01       	movw	r28, r0
  b2:	11 24       	eor	r1, r1
	second_line = scan_row(2);
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	second_line = (second_line & 0x0F);
	first_and_second = first_line | second_line;
	keypad[1]  = first_and_second;
  bc:	02 e6       	ldi	r16, 0x62	; 98
  be:	10 e0       	ldi	r17, 0x00	; 0
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	c8 2b       	or	r28, r24
  c4:	f8 01       	movw	r30, r16
  c6:	c1 83       	std	Z+1, r28	; 0x01
	// Scan the third and fourth lines and store the output in keypad[0] global variable
	third_line  = scan_row(3);
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	third_line  = (third_line  & 0x0F) << 4;
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	e0 01       	movw	r28, r0
  d6:	11 24       	eor	r1, r1
	fourth_line = scan_row(4);
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 3e 00 	call	0x7c	; 0x7c <scan_row>
	fourth_line = (fourth_line & 0x0F);
	third_and_fourth = third_line | fourth_line ;
	keypad[0] = third_and_fourth;
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	c8 2b       	or	r28, r24
  e4:	f8 01       	movw	r30, r16
  e6:	c0 83       	st	Z, r28
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	08 95       	ret

000000f2 <scan_keypad_rising_edge>:
int scan_keypad_rising_edge(){
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	int final_output;
	unsigned int temp_2_output_1,temp_2_output_2;
	unsigned int temp_final_output_2,temp_final_output,temp_output_1,temp_output_2;
	unsigned char save_keyboard[2],save_keyboard_2[2];
	// Scan keyboard for the first time
	scan_keypad();
  fa:	0e 94 4e 00 	call	0x9c	; 0x9c <scan_keypad>
	save_keyboard[0] = keypad[0];
  fe:	e2 e6       	ldi	r30, 0x62	; 98
 100:	f0 e0       	ldi	r31, 0x00	; 0
	save_keyboard[1] = keypad[1];
	temp_output_1 = save_keyboard[1] << 8;
	temp_output_2 = save_keyboard[0];
 102:	c0 81       	ld	r28, Z
 104:	d0 e0       	ldi	r29, 0x00	; 0
	// Join the output of the final in one integer(16 bit)
	temp_final_output =( temp_output_1 | temp_output_2 );
 106:	81 81       	ldd	r24, Z+1	; 0x01
 108:	8e 01       	movw	r16, r28
 10a:	18 2b       	or	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f e1       	ldi	r24, 0x1F	; 31
 10e:	9e e4       	ldi	r25, 0x4E	; 78
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <scan_keypad_rising_edge+0x1e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <scan_keypad_rising_edge+0x24>
 116:	00 00       	nop

	// Delay for debouncing effect
	_delay_ms(0x0A);

	// Scan keypad again
	scan_keypad();
 118:	0e 94 4e 00 	call	0x9c	; 0x9c <scan_keypad>
	temp_final_output_2 =( temp_2_output_1 | temp_2_output_2 );

	// Decline  debouncing keys
	temp_final_output_2 = temp_final_output & temp_final_output;
	// Load previous state in registers
	temp_final_output = previous_state;
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 120:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	// Refresh previous state with fresh pushed keys
	previous_state = temp_output_2;
 124:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 128:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Reverse previous state
	temp_final_output = ~temp_final_output;
	// Find just presed keys
	final_output = temp_final_output & temp_final_output_2;
return final_output;}
 12c:	80 95       	com	r24
 12e:	90 95       	com	r25
 130:	80 23       	and	r24, r16
 132:	91 23       	and	r25, r17
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <keypad_to_ascii>:

unsigned char keypad_to_ascii(){
	if((keypad[0] & 0x01) ==  0x01){
 13e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <keypad>
 142:	80 fd       	sbrc	r24, 0
 144:	23 c0       	rjmp	.+70     	; 0x18c <keypad_to_ascii+0x4e>
	return '*';}
	if((keypad[0] & 0x02) ==  0x02){
 146:	81 fd       	sbrc	r24, 1
 148:	23 c0       	rjmp	.+70     	; 0x190 <keypad_to_ascii+0x52>
	return '0';}
	if((keypad[0] & 0x04) ==  0x04){
 14a:	82 fd       	sbrc	r24, 2
 14c:	23 c0       	rjmp	.+70     	; 0x194 <keypad_to_ascii+0x56>
	return '#';}
	if((keypad[0] & 0x08) ==  0x08){
 14e:	83 fd       	sbrc	r24, 3
 150:	23 c0       	rjmp	.+70     	; 0x198 <keypad_to_ascii+0x5a>
	return 'D';}
	if((keypad[0] & 0x10) ==  0x10){
 152:	84 fd       	sbrc	r24, 4
 154:	23 c0       	rjmp	.+70     	; 0x19c <keypad_to_ascii+0x5e>
	return '7';}
	if((keypad[0] & 0x20) ==  0x20){
 156:	85 fd       	sbrc	r24, 5
 158:	23 c0       	rjmp	.+70     	; 0x1a0 <keypad_to_ascii+0x62>
	return '8';}
	if((keypad[0] & 0x40) ==  0x40){
 15a:	86 fd       	sbrc	r24, 6
 15c:	23 c0       	rjmp	.+70     	; 0x1a4 <keypad_to_ascii+0x66>
	return '9';}
	if((keypad[0] & 0x80) ==  0x80){
 15e:	88 23       	and	r24, r24
 160:	1c f1       	brlt	.+70     	; 0x1a8 <keypad_to_ascii+0x6a>
	return 'C';}
	if((keypad[1] & 0x01) ==  0x01){
 162:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <keypad+0x1>
 166:	90 fd       	sbrc	r25, 0
 168:	21 c0       	rjmp	.+66     	; 0x1ac <keypad_to_ascii+0x6e>
	return '4';}
	if((keypad[1] & 0x02) ==  0x02){
 16a:	91 fd       	sbrc	r25, 1
 16c:	21 c0       	rjmp	.+66     	; 0x1b0 <keypad_to_ascii+0x72>
	return '5';}
	if((keypad[1] & 0x04) ==  0x04){
 16e:	92 fd       	sbrc	r25, 2
 170:	21 c0       	rjmp	.+66     	; 0x1b4 <keypad_to_ascii+0x76>
	return '6';}
	if((keypad[1] & 0x08) ==  0x08){
 172:	93 fd       	sbrc	r25, 3
 174:	21 c0       	rjmp	.+66     	; 0x1b8 <keypad_to_ascii+0x7a>
	return 'B';}
	if((keypad[1] & 0x10) ==  0x10){
 176:	94 fd       	sbrc	r25, 4
 178:	21 c0       	rjmp	.+66     	; 0x1bc <keypad_to_ascii+0x7e>
	return '1';}
	if((keypad[1] & 0x20) ==  0x20){
 17a:	95 fd       	sbrc	r25, 5
 17c:	21 c0       	rjmp	.+66     	; 0x1c0 <keypad_to_ascii+0x82>
	return '2';}
	if((keypad[1] & 0x40) ==  0x40){
 17e:	89 2f       	mov	r24, r25
 180:	80 74       	andi	r24, 0x40	; 64
 182:	96 fd       	sbrc	r25, 6
 184:	1f c0       	rjmp	.+62     	; 0x1c4 <keypad_to_ascii+0x86>
	return '3';}
	if((keypad[1] & 0x80) ==  0x80){
 186:	99 23       	and	r25, r25
 188:	04 f5       	brge	.+64     	; 0x1ca <keypad_to_ascii+0x8c>
 18a:	1e c0       	rjmp	.+60     	; 0x1c8 <keypad_to_ascii+0x8a>
	final_output = temp_final_output & temp_final_output_2;
return final_output;}

unsigned char keypad_to_ascii(){
	if((keypad[0] & 0x01) ==  0x01){
	return '*';}
 18c:	8a e2       	ldi	r24, 0x2A	; 42
 18e:	08 95       	ret
	if((keypad[0] & 0x02) ==  0x02){
	return '0';}
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	08 95       	ret
	if((keypad[0] & 0x04) ==  0x04){
	return '#';}
 194:	83 e2       	ldi	r24, 0x23	; 35
 196:	08 95       	ret
	if((keypad[0] & 0x08) ==  0x08){
	return 'D';}
 198:	84 e4       	ldi	r24, 0x44	; 68
 19a:	08 95       	ret
	if((keypad[0] & 0x10) ==  0x10){
	return '7';}
 19c:	87 e3       	ldi	r24, 0x37	; 55
 19e:	08 95       	ret
	if((keypad[0] & 0x20) ==  0x20){
	return '8';}
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	08 95       	ret
	if((keypad[0] & 0x40) ==  0x40){
	return '9';}
 1a4:	89 e3       	ldi	r24, 0x39	; 57
 1a6:	08 95       	ret
	if((keypad[0] & 0x80) ==  0x80){
	return 'C';}
 1a8:	83 e4       	ldi	r24, 0x43	; 67
 1aa:	08 95       	ret
	if((keypad[1] & 0x01) ==  0x01){
	return '4';}
 1ac:	84 e3       	ldi	r24, 0x34	; 52
 1ae:	08 95       	ret
	if((keypad[1] & 0x02) ==  0x02){
	return '5';}
 1b0:	85 e3       	ldi	r24, 0x35	; 53
 1b2:	08 95       	ret
	if((keypad[1] & 0x04) ==  0x04){
	return '6';}
 1b4:	86 e3       	ldi	r24, 0x36	; 54
 1b6:	08 95       	ret
	if((keypad[1] & 0x08) ==  0x08){
	return 'B';}
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	08 95       	ret
	if((keypad[1] & 0x10) ==  0x10){
	return '1';}
 1bc:	81 e3       	ldi	r24, 0x31	; 49
 1be:	08 95       	ret
	if((keypad[1] & 0x20) ==  0x20){
	return '2';}
 1c0:	82 e3       	ldi	r24, 0x32	; 50
 1c2:	08 95       	ret
	if((keypad[1] & 0x40) ==  0x40){
	return '3';}
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	08 95       	ret
	if((keypad[1] & 0x80) ==  0x80){
	return 'A';}
 1c8:	81 e4       	ldi	r24, 0x41	; 65
return 0x00;}
 1ca:	08 95       	ret

000001cc <keypad_to_hex>:

unsigned char keypad_to_hex(){
	if((keypad[0] & 0x01) ==  0x01){
 1cc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <keypad>
 1d0:	89 2f       	mov	r24, r25
 1d2:	81 70       	andi	r24, 0x01	; 1
 1d4:	90 fd       	sbrc	r25, 0
 1d6:	23 c0       	rjmp	.+70     	; 0x21e <keypad_to_hex+0x52>
	return 0x0E;}
	if((keypad[0] & 0x02) ==  0x02){
 1d8:	91 fd       	sbrc	r25, 1
 1da:	3e c0       	rjmp	.+124    	; 0x258 <keypad_to_hex+0x8c>
	return 0x00;}
	if((keypad[0] & 0x04) ==  0x04){
 1dc:	92 fd       	sbrc	r25, 2
 1de:	21 c0       	rjmp	.+66     	; 0x222 <keypad_to_hex+0x56>
	return 0x0F;}
	if((keypad[0] & 0x08) ==  0x08){
 1e0:	93 fd       	sbrc	r25, 3
 1e2:	21 c0       	rjmp	.+66     	; 0x226 <keypad_to_hex+0x5a>
	return 0x0D;}
	if((keypad[0] & 0x10) ==  0x10){
 1e4:	94 fd       	sbrc	r25, 4
 1e6:	21 c0       	rjmp	.+66     	; 0x22a <keypad_to_hex+0x5e>
	return 0x07;}
	if((keypad[0] & 0x20) ==  0x20){
 1e8:	95 fd       	sbrc	r25, 5
 1ea:	21 c0       	rjmp	.+66     	; 0x22e <keypad_to_hex+0x62>
	return 0x08;}
	if((keypad[0] & 0x40) ==  0x40){
 1ec:	96 fd       	sbrc	r25, 6
 1ee:	21 c0       	rjmp	.+66     	; 0x232 <keypad_to_hex+0x66>
	return 0x09;}
	if((keypad[0] & 0x80) ==  0x80){
 1f0:	99 23       	and	r25, r25
 1f2:	0c f1       	brlt	.+66     	; 0x236 <keypad_to_hex+0x6a>
	return 0x0C;}
	if((keypad[1] & 0x01) ==  0x01){
 1f4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <keypad+0x1>
 1f8:	90 fd       	sbrc	r25, 0
 1fa:	1f c0       	rjmp	.+62     	; 0x23a <keypad_to_hex+0x6e>
	return 0x04;}
	if((keypad[1] & 0x02) ==  0x02){
 1fc:	91 fd       	sbrc	r25, 1
 1fe:	1f c0       	rjmp	.+62     	; 0x23e <keypad_to_hex+0x72>
	return 0x05;}
	if((keypad[1] & 0x04) ==  0x04){
 200:	92 fd       	sbrc	r25, 2
 202:	1f c0       	rjmp	.+62     	; 0x242 <keypad_to_hex+0x76>
	return 0x06;}
	if((keypad[1] & 0x08) ==  0x08){
 204:	93 fd       	sbrc	r25, 3
 206:	1f c0       	rjmp	.+62     	; 0x246 <keypad_to_hex+0x7a>
	return 0x0B;}
	if((keypad[1] & 0x10) ==  0x10){
 208:	94 fd       	sbrc	r25, 4
 20a:	1f c0       	rjmp	.+62     	; 0x24a <keypad_to_hex+0x7e>
	return 0x01;}
	if((keypad[1] & 0x20) ==  0x20){
 20c:	95 fd       	sbrc	r25, 5
 20e:	1f c0       	rjmp	.+62     	; 0x24e <keypad_to_hex+0x82>
	return 0x02;}
	if((keypad[1] & 0x40) ==  0x40){
 210:	89 2f       	mov	r24, r25
 212:	80 74       	andi	r24, 0x40	; 64
 214:	96 fd       	sbrc	r25, 6
 216:	1d c0       	rjmp	.+58     	; 0x252 <keypad_to_hex+0x86>
	return 0x03;}
	if((keypad[1] & 0x80) ==  0x80){
 218:	99 23       	and	r25, r25
 21a:	f4 f4       	brge	.+60     	; 0x258 <keypad_to_hex+0x8c>
 21c:	1c c0       	rjmp	.+56     	; 0x256 <keypad_to_hex+0x8a>
	return 'A';}
return 0x00;}

unsigned char keypad_to_hex(){
	if((keypad[0] & 0x01) ==  0x01){
	return 0x0E;}
 21e:	8e e0       	ldi	r24, 0x0E	; 14
 220:	08 95       	ret
	if((keypad[0] & 0x02) ==  0x02){
	return 0x00;}
	if((keypad[0] & 0x04) ==  0x04){
	return 0x0F;}
 222:	8f e0       	ldi	r24, 0x0F	; 15
 224:	08 95       	ret
	if((keypad[0] & 0x08) ==  0x08){
	return 0x0D;}
 226:	8d e0       	ldi	r24, 0x0D	; 13
 228:	08 95       	ret
	if((keypad[0] & 0x10) ==  0x10){
	return 0x07;}
 22a:	87 e0       	ldi	r24, 0x07	; 7
 22c:	08 95       	ret
	if((keypad[0] & 0x20) ==  0x20){
	return 0x08;}
 22e:	88 e0       	ldi	r24, 0x08	; 8
 230:	08 95       	ret
	if((keypad[0] & 0x40) ==  0x40){
	return 0x09;}
 232:	89 e0       	ldi	r24, 0x09	; 9
 234:	08 95       	ret
	if((keypad[0] & 0x80) ==  0x80){
	return 0x0C;}
 236:	8c e0       	ldi	r24, 0x0C	; 12
 238:	08 95       	ret
	if((keypad[1] & 0x01) ==  0x01){
	return 0x04;}
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	08 95       	ret
	if((keypad[1] & 0x02) ==  0x02){
	return 0x05;}
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	08 95       	ret
	if((keypad[1] & 0x04) ==  0x04){
	return 0x06;}
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	08 95       	ret
	if((keypad[1] & 0x08) ==  0x08){
	return 0x0B;}
 246:	8b e0       	ldi	r24, 0x0B	; 11
 248:	08 95       	ret
	if((keypad[1] & 0x10) ==  0x10){
	return 0x01;}
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	08 95       	ret
	if((keypad[1] & 0x20) ==  0x20){
	return 0x02;}
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	08 95       	ret
	if((keypad[1] & 0x40) ==  0x40){
	return 0x03;}
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	08 95       	ret
	if((keypad[1] & 0x80) ==  0x80){
	return 0x0A;}
 256:	8a e0       	ldi	r24, 0x0A	; 10
return 0x00;}
 258:	08 95       	ret

0000025a <write_2_nibbles>:

void write_2_nibbles(unsigned char input)
{   unsigned char r25,low_nibble;
	unsigned char first_input,second_input,low_to_high_nibble;
	r25 = (PIND & 0X0F);
 25a:	90 b3       	in	r25, 0x10	; 16
 25c:	9f 70       	andi	r25, 0x0F	; 15
	// Get the 4 msb of input and send to Port_D
	first_input = (input & 0xF0) + r25;
 25e:	28 2f       	mov	r18, r24
 260:	20 7f       	andi	r18, 0xF0	; 240
 262:	29 0f       	add	r18, r25
	PORTD = first_input;
 264:	22 bb       	out	0x12, r18	; 18
	PORTD = (1 << PD3);
 266:	28 e0       	ldi	r18, 0x08	; 8
 268:	22 bb       	out	0x12, r18	; 18
	PORTD = (0 << PD3);
 26a:	12 ba       	out	0x12, r1	; 18
	//Get the 4 lsb and send them to portd as msb
	low_nibble =  input & 0x0F;
	low_to_high_nibble = (low_nibble <<4);
	second_input = low_to_high_nibble + r25;
 26c:	30 e1       	ldi	r19, 0x10	; 16
 26e:	83 9f       	mul	r24, r19
 270:	90 0d       	add	r25, r0
 272:	11 24       	eor	r1, r1
	PORTD = second_input;
 274:	92 bb       	out	0x12, r25	; 18
	PORTD = (1 << PD3);
 276:	22 bb       	out	0x12, r18	; 18
	PORTD = (0 << PD3);
 278:	12 ba       	out	0x12, r1	; 18
 27a:	08 95       	ret

0000027c <lcd_data>:
	return ;
}
void lcd_data(unsigned char input){
	PORTD = (1 << PD2 );
 27c:	94 e0       	ldi	r25, 0x04	; 4
 27e:	92 bb       	out	0x12, r25	; 18
	write_2_nibbles(input);
 280:	0e 94 2d 01 	call	0x25a	; 0x25a <write_2_nibbles>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	82 e7       	ldi	r24, 0x72	; 114
 286:	8a 95       	dec	r24
 288:	f1 f7       	brne	.-4      	; 0x286 <lcd_data+0xa>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_data+0x10>
 28c:	08 95       	ret

0000028e <lcd_command>:
	_delay_us(43);
	return ;
}

void lcd_command(unsigned char command){
	PORTB = (0 << PD2);
 28e:	18 ba       	out	0x18, r1	; 24
	write_2_nibbles(command);
 290:	0e 94 2d 01 	call	0x25a	; 0x25a <write_2_nibbles>
 294:	88 e6       	ldi	r24, 0x68	; 104
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_command+0x8>
 29a:	08 95       	ret

0000029c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	89 ef       	ldi	r24, 0xF9	; 249
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <lcd_init+0x6>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <lcd_init+0x10>
 2ac:	00 00       	nop
	_delay_us(39);
	return ;
}
void lcd_init(){
	_delay_ms(40);
	PORTD = 0x30;
 2ae:	90 e3       	ldi	r25, 0x30	; 48
 2b0:	92 bb       	out	0x12, r25	; 18
	PORTD = (1 << PD3);
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	82 bb       	out	0x12, r24	; 18
	PORTD = (0 << PD3);
 2b6:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	28 e6       	ldi	r18, 0x68	; 104
 2ba:	2a 95       	dec	r18
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x1e>
	_delay_us(39);

	PORTD = 0x30;
 2be:	92 bb       	out	0x12, r25	; 18
	PORTD = (1 << PD3);
 2c0:	82 bb       	out	0x12, r24	; 18
	PORTD = (0 << PD3);
 2c2:	12 ba       	out	0x12, r1	; 18
 2c4:	98 e6       	ldi	r25, 0x68	; 104
 2c6:	9a 95       	dec	r25
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_init+0x2a>
	_delay_us(39);


	PORTD = 0x20;
 2ca:	90 e2       	ldi	r25, 0x20	; 32
 2cc:	92 bb       	out	0x12, r25	; 18
	PORTD = (1 << PD3);
 2ce:	82 bb       	out	0x12, r24	; 18
	PORTD = (0 << PD3);
 2d0:	12 ba       	out	0x12, r1	; 18
 2d2:	28 e6       	ldi	r18, 0x68	; 104
 2d4:	2a 95       	dec	r18
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <lcd_init+0x38>
	_delay_us(39);

	lcd_command(0x28);
 2d8:	88 e2       	ldi	r24, 0x28	; 40
 2da:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
	lcd_command(0x0c);
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
	lcd_command(0x01);
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
 2ea:	83 ef       	ldi	r24, 0xF3	; 243
 2ec:	9b e0       	ldi	r25, 0x0B	; 11
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0x52>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <lcd_init+0x58>
 2f4:	00 00       	nop
	_delay_us(1530);
	
	lcd_command(0x06);
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
 2fc:	08 95       	ret

000002fe <main>:
int main(void){
	unsigned int  first_key, second_key;
	unsigned char first_number,second_number;
	unsigned char first_number_in_hex,second_number_in_hex,final_number_in_hex;
	unsigned char ekatondades=0,dekades=0,monades=0,sign;
	DDRB = 0xFF;
 2fe:	8f ef       	ldi	r24, 0xFF	; 255
 300:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xF0;
 302:	80 ef       	ldi	r24, 0xF0	; 240
 304:	84 bb       	out	0x14, r24	; 20
	lcd_init();
 306:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_init>
}
int main(void){
	unsigned int  first_key, second_key;
	unsigned char first_number,second_number;
	unsigned char first_number_in_hex,second_number_in_hex,final_number_in_hex;
	unsigned char ekatondades=0,dekades=0,monades=0,sign;
 30a:	d1 2c       	mov	r13, r1
 30c:	c1 2c       	mov	r12, r1
	lcd_init();
	while(1){
		previous_state = 0x0000;
		do{
			first_key = scan_keypad_rising_edge();
			keypad[0] = first_key & 0x00FF;
 30e:	c2 e6       	ldi	r28, 0x62	; 98
 310:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char ekatondades=0,dekades=0,monades=0,sign;
	DDRB = 0xFF;
	DDRC = 0xF0;
	lcd_init();
	while(1){
		previous_state = 0x0000;
 312:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 316:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		do{
			first_key = scan_keypad_rising_edge();
 31a:	0e 94 79 00 	call	0xf2	; 0xf2 <scan_keypad_rising_edge>
			keypad[0] = first_key & 0x00FF;
 31e:	88 83       	st	Y, r24
			keypad[1] = ( (first_key & 0xFF00 >> 8) & 0x00FF);
 320:	89 83       	std	Y+1, r24	; 0x01
			first_number = keypad_to_ascii();
 322:	0e 94 9f 00 	call	0x13e	; 0x13e <keypad_to_ascii>
 326:	f8 2e       	mov	r15, r24
			first_number_in_hex = keypad_to_hex();
 328:	0e 94 e6 00 	call	0x1cc	; 0x1cc <keypad_to_hex>
 32c:	18 2f       	mov	r17, r24
		}while(first_number==0x00);
 32e:	ff 20       	and	r15, r15
 330:	a1 f3       	breq	.-24     	; 0x31a <main+0x1c>
		do{
			//isos thelei ena temp save
			second_key = scan_keypad_rising_edge();
 332:	0e 94 79 00 	call	0xf2	; 0xf2 <scan_keypad_rising_edge>
			keypad[0] = second_key & 0x00FF;
 336:	88 83       	st	Y, r24
			keypad[1] = ( (second_key & 0xFF00 >> 8) & 0x00FF);
 338:	89 83       	std	Y+1, r24	; 0x01
			second_number = keypad_to_ascii();
 33a:	0e 94 9f 00 	call	0x13e	; 0x13e <keypad_to_ascii>
 33e:	e8 2e       	mov	r14, r24
			second_number_in_hex = keypad_to_hex();
 340:	0e 94 e6 00 	call	0x1cc	; 0x1cc <keypad_to_hex>
 344:	08 2f       	mov	r16, r24
		}while(second_number==0x00);
 346:	ee 20       	and	r14, r14
 348:	a1 f3       	breq	.-24     	; 0x332 <main+0x34>
		lcd_command(0x01);
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 47 01 	call	0x28e	; 0x28e <lcd_command>
		// lcd_init();
		lcd_data(first_number);
 350:	8f 2d       	mov	r24, r15
 352:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_data>
		lcd_data(second_number);
 356:	8e 2d       	mov	r24, r14
 358:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_data>
		lcd_data('=');
 35c:	8d e3       	ldi	r24, 0x3D	; 61
 35e:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_data>
		first_number_in_hex = ( first_number_in_hex << 4);
		final_number_in_hex = first_number_in_hex | second_number_in_hex;
 362:	12 95       	swap	r17
 364:	10 7f       	andi	r17, 0xF0	; 240
 366:	10 2b       	or	r17, r16
		if((final_number_in_hex & 0x80) == 0x80){
 368:	14 f0       	brlt	.+4      	; 0x36e <main+0x70>
			sign = '-' ;
		}
		else{
			sign = '+' ;
 36a:	8b e2       	ldi	r24, 0x2B	; 43
 36c:	01 c0       	rjmp	.+2      	; 0x370 <main+0x72>
		lcd_data(second_number);
		lcd_data('=');
		first_number_in_hex = ( first_number_in_hex << 4);
		final_number_in_hex = first_number_in_hex | second_number_in_hex;
		if((final_number_in_hex & 0x80) == 0x80){
			sign = '-' ;
 36e:	8d e2       	ldi	r24, 0x2D	; 45
		}
		else{
			sign = '+' ;
		}
		while(final_number_in_hex>=10){
 370:	1a 30       	cpi	r17, 0x0A	; 10
 372:	50 f0       	brcs	.+20     	; 0x388 <main+0x8a>
			if(final_number_in_hex >=100){
 374:	14 36       	cpi	r17, 0x64	; 100
 376:	20 f0       	brcs	.+8      	; 0x380 <main+0x82>
				ekatondades = 1;
				final_number_in_hex = final_number_in_hex -100;
 378:	14 56       	subi	r17, 0x64	; 100
		else{
			sign = '+' ;
		}
		while(final_number_in_hex>=10){
			if(final_number_in_hex >=100){
				ekatondades = 1;
 37a:	cc 24       	eor	r12, r12
 37c:	c3 94       	inc	r12
 37e:	02 c0       	rjmp	.+4      	; 0x384 <main+0x86>
				final_number_in_hex = final_number_in_hex -100;
			}
			else{
				dekades++;
 380:	d3 94       	inc	r13
				final_number_in_hex = final_number_in_hex -10;
 382:	1a 50       	subi	r17, 0x0A	; 10
			sign = '-' ;
		}
		else{
			sign = '+' ;
		}
		while(final_number_in_hex>=10){
 384:	1a 30       	cpi	r17, 0x0A	; 10
 386:	b0 f7       	brcc	.-20     	; 0x374 <main+0x76>
				dekades++;
				final_number_in_hex = final_number_in_hex -10;

			}
		}
		ekatondades = ekatondades + 48;
 388:	90 e3       	ldi	r25, 0x30	; 48
 38a:	c9 0e       	add	r12, r25
		dekades = dekades + 48;
 38c:	d9 0e       	add	r13, r25
		monades = final_number_in_hex + 48;
		lcd_data(sign);
 38e:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_data>
		lcd_data(ekatondades);
 392:	8c 2d       	mov	r24, r12
 394:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_data>
		lcd_data(dekades);
 398:	8d 2d       	mov	r24, r13
 39a:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_data>
		lcd_data(monades);
 39e:	80 e3       	ldi	r24, 0x30	; 48
 3a0:	81 0f       	add	r24, r17
 3a2:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_data>

	}
 3a6:	b5 cf       	rjmp	.-150    	; 0x312 <main+0x14>

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
