
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000292  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b92  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000699  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a8  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000484  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 88 00 	call	0x110	; 0x110 <main>
  64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <write_2_nibbles>:
#include <util/delay.h>

void write_2_nibbles(unsigned char input)
{   unsigned char r25,low_nibble;
	unsigned char first_input,second_input,low_to_high_nibble;
	r25 = (PIND & 0X0F);
  6c:	90 b3       	in	r25, 0x10	; 16
  6e:	9f 70       	andi	r25, 0x0F	; 15
	// Get the 4 msb of input and send to Port_D
	first_input = (input & 0xF0) + r25;
  70:	28 2f       	mov	r18, r24
  72:	20 7f       	andi	r18, 0xF0	; 240
  74:	29 0f       	add	r18, r25
	PORTD = first_input;
  76:	22 bb       	out	0x12, r18	; 18
	PORTD = (1 << PD3);
  78:	28 e0       	ldi	r18, 0x08	; 8
  7a:	22 bb       	out	0x12, r18	; 18
	PORTD = (0 << PD3);
  7c:	12 ba       	out	0x12, r1	; 18
	//Get the 4 lsb and send them to portd as msb
	low_nibble =  input & 0x0F;
	low_to_high_nibble = (low_nibble <<4);
	second_input = low_to_high_nibble + r25;
  7e:	30 e1       	ldi	r19, 0x10	; 16
  80:	83 9f       	mul	r24, r19
  82:	90 0d       	add	r25, r0
  84:	11 24       	eor	r1, r1
	PORTD = second_input;
  86:	92 bb       	out	0x12, r25	; 18
	PORTD = (1 << PD3);
  88:	22 bb       	out	0x12, r18	; 18
	PORTD = (0 << PD3);
  8a:	12 ba       	out	0x12, r1	; 18
  8c:	08 95       	ret

0000008e <lcd_data>:
	return ;
}
void lcd_data(unsigned char input){
	PORTD = (1 << PD2 );
  8e:	94 e0       	ldi	r25, 0x04	; 4
  90:	92 bb       	out	0x12, r25	; 18
	write_2_nibbles(input);
  92:	0e 94 36 00 	call	0x6c	; 0x6c <write_2_nibbles>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	82 e7       	ldi	r24, 0x72	; 114
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_data+0xa>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcd_data+0x10>
  9e:	08 95       	ret

000000a0 <lcd_command>:
	_delay_us(43);
	return ;
}

void lcd_command(unsigned char command){
	PORTB = (0 << PD2);
  a0:	18 ba       	out	0x18, r1	; 24
	write_2_nibbles(command);
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <write_2_nibbles>
  a6:	88 e6       	ldi	r24, 0x68	; 104
  a8:	8a 95       	dec	r24
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_command+0x8>
  ac:	08 95       	ret

000000ae <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	89 ef       	ldi	r24, 0xF9	; 249
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <lcd_init+0x6>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <lcd_init+0x10>
  be:	00 00       	nop
	_delay_us(39);
	return ;
}
void lcd_init(){
	_delay_ms(40);
	PORTD = 0x30;
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	92 bb       	out	0x12, r25	; 18
	PORTD = (1 << PD3);
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	82 bb       	out	0x12, r24	; 18
	PORTD = (0 << PD3);
  c8:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	28 e6       	ldi	r18, 0x68	; 104
  cc:	2a 95       	dec	r18
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_init+0x1e>
	_delay_us(39);

	PORTD = 0x30;
  d0:	92 bb       	out	0x12, r25	; 18
	PORTD = (1 << PD3);
  d2:	82 bb       	out	0x12, r24	; 18
	PORTD = (0 << PD3);
  d4:	12 ba       	out	0x12, r1	; 18
  d6:	98 e6       	ldi	r25, 0x68	; 104
  d8:	9a 95       	dec	r25
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_init+0x2a>
	_delay_us(39);


	PORTD = 0x20;
  dc:	90 e2       	ldi	r25, 0x20	; 32
  de:	92 bb       	out	0x12, r25	; 18
	PORTD = (1 << PD3);
  e0:	82 bb       	out	0x12, r24	; 18
	PORTD = (0 << PD3);
  e2:	12 ba       	out	0x12, r1	; 18
  e4:	28 e6       	ldi	r18, 0x68	; 104
  e6:	2a 95       	dec	r18
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcd_init+0x38>
	_delay_us(39);

	lcd_command(0x28);
  ea:	88 e2       	ldi	r24, 0x28	; 40
  ec:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
	lcd_command(0x0c);
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
	lcd_command(0x01);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
  fc:	83 ef       	ldi	r24, 0xF3	; 243
  fe:	9b e0       	ldi	r25, 0x0B	; 11
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_init+0x52>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_init+0x58>
 106:	00 00       	nop
	_delay_us(1530);
	
	lcd_command(0x06);
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
 10e:	08 95       	ret

00000110 <main>:
	return ;
}
int main(void){
	DDRB = 0x00;
 110:	17 ba       	out	0x17, r1	; 23
	unsigned char minutes_high=0x00,seconds_high=0x00,minutes_low=0x00,seconds_low=0x00;
 	lcd_init();
 112:	0e 94 57 00 	call	0xae	; 0xae <lcd_init>
	lcd_command(0x06);
	return ;
}
int main(void){
	DDRB = 0x00;
	unsigned char minutes_high=0x00,seconds_high=0x00,minutes_low=0x00,seconds_low=0x00;
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
 11c:	00 e0       	ldi	r16, 0x00	; 0
 	lcd_init();
change_of_mind:
    	while(1){
		if((PINB & 0x80) == 0x80){
 11e:	b7 9b       	sbis	0x16, 7	; 22
 120:	2b c0       	rjmp	.+86     	; 0x178 <main+0x68>
reset:	
		while((PINB & 0x80)== 0x80);
 122:	b7 99       	sbic	0x16, 7	; 22
 124:	fe cf       	rjmp	.-4      	; 0x122 <main+0x12>
		minutes_high=0x00;
		minutes_low=0x00;
		seconds_high=0x00;
		seconds_low=0x00;
		lcd_command(0x01);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
		lcd_data(minutes_high+48);
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data(minutes_low+48);
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data('M');
 138:	8d e4       	ldi	r24, 0x4D	; 77
 13a:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data('I');
 13e:	89 e4       	ldi	r24, 0x49	; 73
 140:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data('N');
 144:	8e e4       	ldi	r24, 0x4E	; 78
 146:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data(':');
 14a:	8a e3       	ldi	r24, 0x3A	; 58
 14c:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data(seconds_high+48);
 150:	80 e3       	ldi	r24, 0x30	; 48
 152:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data(seconds_low+48);
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data('S');
 15c:	83 e5       	ldi	r24, 0x53	; 83
 15e:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data('E');
 162:	85 e4       	ldi	r24, 0x45	; 69
 164:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data('C');
 168:	83 e4       	ldi	r24, 0x43	; 67
 16a:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
reset:	
		while((PINB & 0x80)== 0x80);
		minutes_high=0x00;
		minutes_low=0x00;
		seconds_high=0x00;
		seconds_low=0x00;
 16e:	c0 e0       	ldi	r28, 0x00	; 0
    	while(1){
		if((PINB & 0x80) == 0x80){
reset:	
		while((PINB & 0x80)== 0x80);
		minutes_high=0x00;
		minutes_low=0x00;
 170:	10 e0       	ldi	r17, 0x00	; 0
		seconds_high=0x00;
 172:	d0 e0       	ldi	r29, 0x00	; 0
change_of_mind:
    	while(1){
		if((PINB & 0x80) == 0x80){
reset:	
		while((PINB & 0x80)== 0x80);
		minutes_high=0x00;
 174:	00 e0       	ldi	r16, 0x00	; 0
 176:	d3 cf       	rjmp	.-90     	; 0x11e <main+0xe>
		lcd_data('S');
		lcd_data('E');
		lcd_data('C');
			
		}
		else if ( (PINB & 0x01) == 0x01 ){
 178:	b0 9b       	sbis	0x16, 0	; 22
 17a:	d1 cf       	rjmp	.-94     	; 0x11e <main+0xe>
		    while ( (PINB & 0x01) == 0x01 ){
 17c:	b0 9b       	sbis	0x16, 0	; 22
 17e:	cf cf       	rjmp	.-98     	; 0x11e <main+0xe>
			  if((PINB & 0x80) == 0x80){
 180:	b7 9b       	sbis	0x16, 7	; 22
 182:	03 c0       	rjmp	.+6      	; 0x18a <main+0x7a>
 184:	ce cf       	rjmp	.-100    	; 0x122 <main+0x12>
 186:	b7 99       	sbic	0x16, 7	; 22
 188:	cc cf       	rjmp	.-104    	; 0x122 <main+0x12>
			  goto reset; }
			  for(int i =0; i<1000; i ++){
				  if((PINB&0x80) == 0x80){
 18a:	b7 99       	sbic	0x16, 7	; 22
 18c:	ca cf       	rjmp	.-108    	; 0x122 <main+0x12>
				  goto reset;
				  }
				  if ( (PINB&0x01) == 0x00){
 18e:	b0 99       	sbic	0x16, 0	; 22
 190:	4b c0       	rjmp	.+150    	; 0x228 <main+0x118>
 192:	c5 cf       	rjmp	.-118    	; 0x11e <main+0xe>
		else if ( (PINB & 0x01) == 0x01 ){
		    while ( (PINB & 0x01) == 0x01 ){
			  if((PINB & 0x80) == 0x80){
			  goto reset; }
			  for(int i =0; i<1000; i ++){
				  if((PINB&0x80) == 0x80){
 194:	b7 99       	sbic	0x16, 7	; 22
 196:	c5 cf       	rjmp	.-118    	; 0x122 <main+0x12>
				  goto reset;
				  }
				  if ( (PINB&0x01) == 0x00){
 198:	b0 9b       	sbis	0x16, 0	; 22
 19a:	c1 cf       	rjmp	.-126    	; 0x11e <main+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	ef ec       	ldi	r30, 0xCF	; 207
 19e:	f7 e0       	ldi	r31, 0x07	; 7
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x90>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x96>
 1a6:	00 00       	nop
 1a8:	01 97       	sbiw	r24, 0x01	; 1
		}
		else if ( (PINB & 0x01) == 0x01 ){
		    while ( (PINB & 0x01) == 0x01 ){
			  if((PINB & 0x80) == 0x80){
			  goto reset; }
			  for(int i =0; i<1000; i ++){
 1aa:	a1 f7       	brne	.-24     	; 0x194 <main+0x84>
				  if ( (PINB&0x01) == 0x00){
				   goto change_of_mind;
				  }
				  _delay_ms(1);
			  }
			  seconds_low=seconds_low + 1;
 1ac:	cf 5f       	subi	r28, 0xFF	; 255
			  if(seconds_low==10){
 1ae:	ca 30       	cpi	r28, 0x0A	; 10
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <main+0xa6>
		      seconds_high=seconds_high+1;
 1b2:	df 5f       	subi	r29, 0xFF	; 255
			  seconds_low=0x00;}
 1b4:	c0 e0       	ldi	r28, 0x00	; 0
		      if(seconds_high==6){
 1b6:	d6 30       	cpi	r29, 0x06	; 6
 1b8:	11 f4       	brne	.+4      	; 0x1be <main+0xae>
			  seconds_high=0;
			  minutes_low=minutes_low + 1;
 1ba:	1f 5f       	subi	r17, 0xFF	; 255
			  seconds_low=seconds_low + 1;
			  if(seconds_low==10){
		      seconds_high=seconds_high+1;
			  seconds_low=0x00;}
		      if(seconds_high==6){
			  seconds_high=0;
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
			  minutes_low=minutes_low + 1;
			  }
			  if(minutes_low==10){
 1be:	1a 30       	cpi	r17, 0x0A	; 10
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <main+0xb6>
			  minutes_low=0;
			  minutes_high=minutes_high+1;
 1c2:	0f 5f       	subi	r16, 0xFF	; 255
		      if(seconds_high==6){
			  seconds_high=0;
			  minutes_low=minutes_low + 1;
			  }
			  if(minutes_low==10){
			  minutes_low=0;
 1c4:	10 e0       	ldi	r17, 0x00	; 0
			  minutes_high=minutes_high+1;
			  }
			  if(minutes_high==6){
 1c6:	06 30       	cpi	r16, 0x06	; 6
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <main+0xc2>
				  minutes_high=0;
				  minutes_low=0;
				  seconds_high=0;
				  seconds_low=0;
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
			  minutes_low=0;
			  minutes_high=minutes_high+1;
			  }
			  if(minutes_high==6){
				  minutes_high=0;
				  minutes_low=0;
 1cc:	10 e0       	ldi	r17, 0x00	; 0
				  seconds_high=0;
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
			  if(minutes_low==10){
			  minutes_low=0;
			  minutes_high=minutes_high+1;
			  }
			  if(minutes_high==6){
				  minutes_high=0;
 1d0:	00 e0       	ldi	r16, 0x00	; 0
				  minutes_low=0;
				  seconds_high=0;
				  seconds_low=0;
			  }
			  lcd_command(0x01);	  
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_command>
		      lcd_data(minutes_high+48);
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	80 0f       	add	r24, r16
 1dc:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data(minutes_low+48);
 1e0:	80 e3       	ldi	r24, 0x30	; 48
 1e2:	81 0f       	add	r24, r17
 1e4:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data('M');
 1e8:	8d e4       	ldi	r24, 0x4D	; 77
 1ea:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data('I');
 1ee:	89 e4       	ldi	r24, 0x49	; 73
 1f0:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data('N');
 1f4:	8e e4       	ldi	r24, 0x4E	; 78
 1f6:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data(':');
 1fa:	8a e3       	ldi	r24, 0x3A	; 58
 1fc:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data(seconds_high+48);
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	8d 0f       	add	r24, r29
 204:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data(seconds_low+48);
 208:	80 e3       	ldi	r24, 0x30	; 48
 20a:	8c 0f       	add	r24, r28
 20c:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data('S');
 210:	83 e5       	ldi	r24, 0x53	; 83
 212:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data('E');
 216:	85 e4       	ldi	r24, 0x45	; 69
 218:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		      lcd_data('C');
 21c:	83 e4       	ldi	r24, 0x43	; 67
 21e:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
		lcd_data('E');
		lcd_data('C');
			
		}
		else if ( (PINB & 0x01) == 0x01 ){
		    while ( (PINB & 0x01) == 0x01 ){
 222:	b0 99       	sbic	0x16, 0	; 22
 224:	b0 cf       	rjmp	.-160    	; 0x186 <main+0x76>
 226:	7b cf       	rjmp	.-266    	; 0x11e <main+0xe>
 228:	8f ec       	ldi	r24, 0xCF	; 207
 22a:	97 e0       	ldi	r25, 0x07	; 7
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <main+0x11c>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x122>
 232:	00 00       	nop
 234:	87 ee       	ldi	r24, 0xE7	; 231
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	ad cf       	rjmp	.-166    	; 0x194 <main+0x84>

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
