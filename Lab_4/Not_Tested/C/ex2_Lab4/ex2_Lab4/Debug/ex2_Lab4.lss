
ex2_Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000003d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f72  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d0  00000000  00000000  0000143a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000066c  00000000  00000000  00001b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  000022a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000952  00000000  00000000  0000271f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003071  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8b 01 	call	0x316	; 0x316 <main>
  74:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <write_2_nibbles>:

char hun,dec,mon;

void write_2_nibbles(char data)
{
	char previous_state = PIND;
  7c:	20 b3       	in	r18, 0x10	; 16
	PORTD = (data&0xf0) | (previous_state&0x0f);
  7e:	2f 70       	andi	r18, 0x0F	; 15
  80:	98 2f       	mov	r25, r24
  82:	90 7f       	andi	r25, 0xF0	; 240
  84:	92 2b       	or	r25, r18
  86:	92 bb       	out	0x12, r25	; 18
	
	PORTD |= (1<<PD3);
  88:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  8a:	93 98       	cbi	0x12, 3	; 18
	
	PORTD = ((data&0x0f)<<4) | (previous_state&0x0f);
  8c:	30 e1       	ldi	r19, 0x10	; 16
  8e:	83 9f       	mul	r24, r19
  90:	c0 01       	movw	r24, r0
  92:	11 24       	eor	r1, r1
  94:	82 2b       	or	r24, r18
  96:	82 bb       	out	0x12, r24	; 18
	
	PORTD |= (1<<PD3);
  98:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  9a:	93 98       	cbi	0x12, 3	; 18
  9c:	08 95       	ret

0000009e <lcd_data>:
	return;
}

void lcd_data(char data)
{
	PORTD |= (1<<PD2);
  9e:	92 9a       	sbi	0x12, 2	; 18
	write_2_nibbles(data);
  a0:	0e 94 3e 00 	call	0x7c	; 0x7c <write_2_nibbles>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	82 e7       	ldi	r24, 0x72	; 114
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_data+0x8>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_data+0xe>
  ac:	08 95       	ret

000000ae <lcd_command>:
}


void lcd_command(char command)
{
	PORTD &= ~(1<<PD2);
  ae:	92 98       	cbi	0x12, 2	; 18
	write_2_nibbles(command);
  b0:	0e 94 3e 00 	call	0x7c	; 0x7c <write_2_nibbles>
  b4:	88 e6       	ldi	r24, 0x68	; 104
  b6:	8a 95       	dec	r24
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_command+0x8>
  ba:	08 95       	ret

000000bc <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <lcd_init+0x6>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <lcd_init+0x10>
  cc:	00 00       	nop


void lcd_init()
{
	_delay_ms(40);
	PORTD = 0x30;
  ce:	80 e3       	ldi	r24, 0x30	; 48
  d0:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<PD3);
  d2:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  d4:	93 98       	cbi	0x12, 3	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	28 e6       	ldi	r18, 0x68	; 104
  d8:	2a 95       	dec	r18
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_init+0x1c>
	_delay_us(39);
	
	PORTD = 0x30;
  dc:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<PD3);
  de:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  e0:	93 98       	cbi	0x12, 3	; 18
  e2:	85 e3       	ldi	r24, 0x35	; 53
  e4:	8a 95       	dec	r24
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_init+0x28>
  e8:	00 00       	nop
	_delay_us(20);
	
	PORTD = 0x20;
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1<<PD3);
  ee:	93 9a       	sbi	0x12, 3	; 18
	PORTD &= ~(1<<PD3);
  f0:	93 98       	cbi	0x12, 3	; 18
  f2:	98 e6       	ldi	r25, 0x68	; 104
  f4:	9a 95       	dec	r25
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_init+0x38>
	_delay_us(39);
	
	lcd_command(0x28);
  f8:	88 e2       	ldi	r24, 0x28	; 40
  fa:	0e 94 57 00 	call	0xae	; 0xae <lcd_command>
	lcd_command(0x0c);
  fe:	8c e0       	ldi	r24, 0x0C	; 12
 100:	0e 94 57 00 	call	0xae	; 0xae <lcd_command>
	lcd_command(0x01);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 57 00 	call	0xae	; 0xae <lcd_command>
 10a:	83 ef       	ldi	r24, 0xF3	; 243
 10c:	9b e0       	ldi	r25, 0x0B	; 11
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_init+0x52>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_init+0x58>
 114:	00 00       	nop
	
	_delay_us(1530);
	
	lcd_command(0x06);
 116:	86 e0       	ldi	r24, 0x06	; 6
 118:	0e 94 57 00 	call	0xae	; 0xae <lcd_command>
 11c:	08 95       	ret

0000011e <one_wire_reset>:
	
	return;
}
unsigned char one_wire_reset(){
	unsigned char crc;
	DDRA  |=  (1 << PA4);
 11e:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 120:	dc 98       	cbi	0x1b, 4	; 27
 122:	8f eb       	ldi	r24, 0xBF	; 191
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <one_wire_reset+0x8>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <one_wire_reset+0xe>
 12c:	00 00       	nop
	_delay_us(480);
	// mb DDRA= (0<<PA4)
	DDRA  &= ~(1 << PA4);
 12e:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 130:	dc 98       	cbi	0x1b, 4	; 27
 132:	e7 ec       	ldi	r30, 0xC7	; 199
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <one_wire_reset+0x18>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <one_wire_reset+0x1e>
 13c:	00 00       	nop
	_delay_us(100);
	crc = PINA ;
 13e:	89 b3       	in	r24, 0x19	; 25
 140:	e7 ef       	ldi	r30, 0xF7	; 247
 142:	f2 e0       	ldi	r31, 0x02	; 2
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <one_wire_reset+0x26>
 148:	00 c0       	rjmp	.+0      	; 0x14a <one_wire_reset+0x2c>
 14a:	00 00       	nop
 14c:	82 95       	swap	r24
 14e:	81 70       	andi	r24, 0x01	; 1
	}
	else{
		return 1;
	}	
	return -1;
}
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	89 27       	eor	r24, r25
 154:	08 95       	ret

00000156 <one_wire_transmit_bit>:

void one_wire_transmit_bit(unsigned char bit){
	DDRA  |=   (1<<PA4);
 156:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1<<PA4);
 158:	dc 98       	cbi	0x1b, 4	; 27
 15a:	95 e0       	ldi	r25, 0x05	; 5
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <one_wire_transmit_bit+0x6>
 160:	00 00       	nop
	_delay_us(2);
	if((bit & 0x01)==0x01){
 162:	80 ff       	sbrs	r24, 0
 164:	0c c0       	rjmp	.+24     	; 0x17e <one_wire_transmit_bit+0x28>
		PORTA |= (1<<PA4);
 166:	dc 9a       	sbi	0x1b, 4	; 27
 168:	8a e9       	ldi	r24, 0x9A	; 154
 16a:	8a 95       	dec	r24
 16c:	f1 f7       	brne	.-4      	; 0x16a <one_wire_transmit_bit+0x14>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <one_wire_transmit_bit+0x1a>
	}
	if((bit & 0x01)==0x00){
		PORTA &= (1<<PA4);
	}
	_delay_us(58);
	DDRA  &= ~(1<<PA4);
 170:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1<<PA4);
 172:	dc 98       	cbi	0x1b, 4	; 27
 174:	92 e0       	ldi	r25, 0x02	; 2
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <one_wire_transmit_bit+0x20>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <one_wire_transmit_bit+0x26>
	_delay_us(1);
} 
 17c:	08 95       	ret
	_delay_us(2);
	if((bit & 0x01)==0x01){
		PORTA |= (1<<PA4);
	}
	if((bit & 0x01)==0x00){
		PORTA &= (1<<PA4);
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	80 71       	andi	r24, 0x10	; 16
 182:	8b bb       	out	0x1b, r24	; 27
 184:	f1 cf       	rjmp	.-30     	; 0x168 <one_wire_transmit_bit+0x12>

00000186 <one_wire_transmit_byte>:
	DDRA  &= ~(1<<PA4);
	PORTA &= ~(1<<PA4);
	_delay_us(1);
} 

void one_wire_transmit_byte(unsigned char byte){
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
 18e:	08 e0       	ldi	r16, 0x08	; 8
 190:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char bit_to_send;
	for(int i=0; i<8; i++){
		bit_to_send = byte & 0x01;
		if(bit_to_send == 0){
 192:	8c 2f       	mov	r24, r28
 194:	81 70       	andi	r24, 0x01	; 1
 196:	c0 fd       	sbrc	r28, 0
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <one_wire_transmit_byte+0x1c>
		one_wire_transmit_bit(0);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 ab 00 	call	0x156	; 0x156 <one_wire_transmit_bit>
 1a0:	04 c0       	rjmp	.+8      	; 0x1aa <one_wire_transmit_byte+0x24>
		}
		else if(bit_to_send == 1){
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	11 f4       	brne	.+4      	; 0x1aa <one_wire_transmit_byte+0x24>
		one_wire_transmit_bit(1);
 1a6:	0e 94 ab 00 	call	0x156	; 0x156 <one_wire_transmit_bit>
		}
		byte = byte >> 1;
 1aa:	c6 95       	lsr	r28
 1ac:	01 50       	subi	r16, 0x01	; 1
 1ae:	11 09       	sbc	r17, r1
	_delay_us(1);
} 

void one_wire_transmit_byte(unsigned char byte){
	unsigned char bit_to_send;
	for(int i=0; i<8; i++){
 1b0:	81 f7       	brne	.-32     	; 0x192 <one_wire_transmit_byte+0xc>
		else if(bit_to_send == 1){
		one_wire_transmit_bit(1);
		}
		byte = byte >> 1;
	}	
}
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <one_wire_receive_bit>:
unsigned char one_wire_receive_bit(){
	unsigned char bit_to_return = 0;
	DDRA  |=  (1 << PA4);
 1ba:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 1bc:	dc 98       	cbi	0x1b, 4	; 27
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <one_wire_receive_bit+0x6>
 1c4:	00 00       	nop
	_delay_us(2);
	DDRA  &= ~(1 << PA4);
 1c6:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 1c8:	dc 98       	cbi	0x1b, 4	; 27
 1ca:	9a e1       	ldi	r25, 0x1A	; 26
 1cc:	9a 95       	dec	r25
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <one_wire_receive_bit+0x12>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <one_wire_receive_bit+0x18>
	_delay_us(10);
	if( (PINA & 0X10) == 0x10 ){
 1d2:	89 b3       	in	r24, 0x19	; 25
 1d4:	92 e8       	ldi	r25, 0x82	; 130
 1d6:	9a 95       	dec	r25
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <one_wire_receive_bit+0x1c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <one_wire_receive_bit+0x22>
		bit_to_return = 1;
	}
	_delay_us(49);
	return bit_to_return;
}
 1dc:	82 95       	swap	r24
 1de:	81 70       	andi	r24, 0x01	; 1
 1e0:	08 95       	ret

000001e2 <one_wire_receive_byte>:
unsigned char one_wire_receive_byte(){
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	08 e0       	ldi	r16, 0x08	; 8
 1ec:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char bit_received,byte_to_return=0;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
	for(int i =0 ; i<8 ; i++){
		byte_to_return = byte_to_return >> 1;
		bit_received = one_wire_receive_bit();
		if(bit_received == 1){
			bit_received = 0x80;	
 1f0:	d0 e8       	ldi	r29, 0x80	; 128
	return bit_to_return;
}
unsigned char one_wire_receive_byte(){
	unsigned char bit_received,byte_to_return=0;
	for(int i =0 ; i<8 ; i++){
		byte_to_return = byte_to_return >> 1;
 1f2:	c8 2f       	mov	r28, r24
 1f4:	c6 95       	lsr	r28
		bit_received = one_wire_receive_bit();
 1f6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <one_wire_receive_bit>
		if(bit_received == 1){
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	09 f4       	brne	.+2      	; 0x200 <one_wire_receive_byte+0x1e>
			bit_received = 0x80;	
 1fe:	8d 2f       	mov	r24, r29
		}
		byte_to_return= byte_to_return | bit_received ;
 200:	8c 2b       	or	r24, r28
 202:	01 50       	subi	r16, 0x01	; 1
 204:	11 09       	sbc	r17, r1
	_delay_us(49);
	return bit_to_return;
}
unsigned char one_wire_receive_byte(){
	unsigned char bit_received,byte_to_return=0;
	for(int i =0 ; i<8 ; i++){
 206:	a9 f7       	brne	.-22     	; 0x1f2 <one_wire_receive_byte+0x10>
			bit_received = 0x80;	
		}
		byte_to_return= byte_to_return | bit_received ;
	}
	return byte_to_return;
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <return_temp>:
unsigned int return_temp(){
 212:	cf 93       	push	r28
	unsigned char crc,finished,temp,temp_sign;
	int sign;
	crc = one_wire_reset();
 214:	0e 94 8f 00 	call	0x11e	; 0x11e <one_wire_reset>
    if(crc == 0x00){
 218:	88 23       	and	r24, r24
 21a:	f9 f0       	breq	.+62     	; 0x25a <return_temp+0x48>
	   return 0x8000;
	}
	one_wire_transmit_byte(0xCC);
 21c:	8c ec       	ldi	r24, 0xCC	; 204
 21e:	0e 94 c3 00 	call	0x186	; 0x186 <one_wire_transmit_byte>
	one_wire_transmit_byte(0x44);
 222:	84 e4       	ldi	r24, 0x44	; 68
 224:	0e 94 c3 00 	call	0x186	; 0x186 <one_wire_transmit_byte>
	while(1){
		finished = one_wire_receive_bit();
 228:	0e 94 dd 00 	call	0x1ba	; 0x1ba <one_wire_receive_bit>
		if((finished & 0x01) == 0x01){
 22c:	80 ff       	sbrs	r24, 0
 22e:	fc cf       	rjmp	.-8      	; 0x228 <return_temp+0x16>
			break;
		}
	}
	crc = one_wire_reset();
 230:	0e 94 8f 00 	call	0x11e	; 0x11e <one_wire_reset>
	if(crc == 0x00){
 234:	88 23       	and	r24, r24
 236:	a1 f0       	breq	.+40     	; 0x260 <return_temp+0x4e>
		return 0x8000;
	}
	one_wire_transmit_byte(0xCC);
 238:	8c ec       	ldi	r24, 0xCC	; 204
 23a:	0e 94 c3 00 	call	0x186	; 0x186 <one_wire_transmit_byte>
	one_wire_transmit_byte(0xBE);
 23e:	8e eb       	ldi	r24, 0xBE	; 190
 240:	0e 94 c3 00 	call	0x186	; 0x186 <one_wire_transmit_byte>
	temp = one_wire_receive_byte();
 244:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <one_wire_receive_byte>
 248:	c8 2f       	mov	r28, r24
	temp = temp >> 1 ;
	temp_sign = one_wire_receive_byte();
 24a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <one_wire_receive_byte>
	sign =  temp_sign;
 24e:	90 e0       	ldi	r25, 0x00	; 0
	sign = sign <<  8;
	sign = sign & 0xFF00;
	return  (sign | temp);
 250:	98 2f       	mov	r25, r24
 252:	88 27       	eor	r24, r24
 254:	c6 95       	lsr	r28
 256:	8c 2b       	or	r24, r28
 258:	05 c0       	rjmp	.+10     	; 0x264 <return_temp+0x52>
unsigned int return_temp(){
	unsigned char crc,finished,temp,temp_sign;
	int sign;
	crc = one_wire_reset();
    if(crc == 0x00){
	   return 0x8000;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e8       	ldi	r25, 0x80	; 128
 25e:	02 c0       	rjmp	.+4      	; 0x264 <return_temp+0x52>
			break;
		}
	}
	crc = one_wire_reset();
	if(crc == 0x00){
		return 0x8000;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e8       	ldi	r25, 0x80	; 128
	sign = sign <<  8;
	sign = sign & 0xFF00;
	return  (sign | temp);
	
		
}
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <no_device>:
void no_device(){
	lcd_command(0x02);
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 57 00 	call	0xae	; 0xae <lcd_command>
	lcd_data('N');
 26e:	8e e4       	ldi	r24, 0x4E	; 78
 270:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data('O');
 274:	8f e4       	ldi	r24, 0x4F	; 79
 276:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data(' ');
 27a:	80 e2       	ldi	r24, 0x20	; 32
 27c:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data('D');
 280:	84 e4       	ldi	r24, 0x44	; 68
 282:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data('E');
 286:	85 e4       	ldi	r24, 0x45	; 69
 288:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data('V');
 28c:	86 e5       	ldi	r24, 0x56	; 86
 28e:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data('I');
 292:	89 e4       	ldi	r24, 0x49	; 73
 294:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
    lcd_data('C');
 298:	83 e4       	ldi	r24, 0x43	; 67
 29a:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data('E');
 29e:	85 e4       	ldi	r24, 0x45	; 69
 2a0:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
 2a4:	08 95       	ret

000002a6 <print_temp>:
	return;
}
void print_temp(unsigned char hun,unsigned char dec,unsigned char mon){
 2a6:	1f 93       	push	r17
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
 2ac:	18 2f       	mov	r17, r24
 2ae:	d6 2f       	mov	r29, r22
 2b0:	c4 2f       	mov	r28, r20
	lcd_command(0x02);
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 57 00 	call	0xae	; 0xae <lcd_command>
	lcd_data(hun+0x30);
 2b8:	80 e3       	ldi	r24, 0x30	; 48
 2ba:	81 0f       	add	r24, r17
 2bc:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data(dec+0x30);
 2c0:	80 e3       	ldi	r24, 0x30	; 48
 2c2:	8d 0f       	add	r24, r29
 2c4:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data(mon+0x30);
 2c8:	80 e3       	ldi	r24, 0x30	; 48
 2ca:	8c 0f       	add	r24, r28
 2cc:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data(248);
 2d0:	88 ef       	ldi	r24, 0xF8	; 248
 2d2:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	lcd_data('C');
 2d6:	83 e4       	ldi	r24, 0x43	; 67
 2d8:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_data>
	return;
}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	08 95       	ret

000002e4 <get_digits>:
void get_digits(char number){
	if(number>=100){
 2e4:	84 36       	cpi	r24, 0x64	; 100
 2e6:	30 f0       	brcs	.+12     	; 0x2f4 <get_digits+0x10>
		hun++;
 2e8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
 2ec:	9f 5f       	subi	r25, 0xFF	; 255
 2ee:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
		number = number -100;
 2f2:	84 56       	subi	r24, 0x64	; 100
	}
	while(number >=10){
 2f4:	8a 30       	cpi	r24, 0x0A	; 10
 2f6:	60 f0       	brcs	.+24     	; 0x310 <get_digits+0x2c>
 2f8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <dec>
 2fc:	9f 5f       	subi	r25, 0xFF	; 255
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <get_digits+0x1e>
 300:	92 2f       	mov	r25, r18
		dec++;
		number = number -10;
 302:	8a 50       	subi	r24, 0x0A	; 10
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	29 0f       	add	r18, r25
void get_digits(char number){
	if(number>=100){
		hun++;
		number = number -100;
	}
	while(number >=10){
 308:	8a 30       	cpi	r24, 0x0A	; 10
 30a:	d0 f7       	brcc	.-12     	; 0x300 <get_digits+0x1c>
 30c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <dec>
		dec++;
		number = number -10;
	}
	mon = number;
 310:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <mon>
 314:	08 95       	ret

00000316 <main>:
	return;
}
int main(void)
{   int temp;
	unsigned char sign,magnitude,sign_ext;
    DDRD = 0xFF;
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	81 bb       	out	0x11, r24	; 17
	lcd_init();
 31a:	0e 94 5e 00 	call	0xbc	; 0xbc <lcd_init>
    while (1) 
    {	hun=0;
 31e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		mon=0;
 322:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <mon>
		dec=0;
 326:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <dec>
		sign = '+';
		temp = return_temp();
 32a:	0e 94 09 01 	call	0x212	; 0x212 <return_temp>
		if(temp == 0x8000){
 32e:	81 15       	cp	r24, r1
 330:	20 e8       	ldi	r18, 0x80	; 128
 332:	92 07       	cpc	r25, r18
 334:	19 f4       	brne	.+6      	; 0x33c <main+0x26>
			no_device();
 336:	0e 94 34 01 	call	0x268	; 0x268 <no_device>
 33a:	f1 cf       	rjmp	.-30     	; 0x31e <main+0x8>
		}
		else{
		   sign_ext  = (temp >> 8) & 0x00FF;
		   if(sign_ext ==  0xff){
 33c:	9f 3f       	cpi	r25, 0xFF	; 255
 33e:	59 f0       	breq	.+22     	; 0x356 <main+0x40>
		   magnitude = temp & 0x00FF;
		   if(sign == '-'){
			   magnitude = ~(magnitude);
			   magnitude = magnitude + 1;
			    }
		   get_digits(magnitude);
 340:	0e 94 72 01 	call	0x2e4	; 0x2e4 <get_digits>
		   print_temp(hun,dec,mon);   
 344:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <mon>
 348:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <dec>
 34c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 350:	0e 94 53 01 	call	0x2a6	; 0x2a6 <print_temp>
 354:	e4 cf       	rjmp	.-56     	; 0x31e <main+0x8>
			   sign = '-';
		   }
		   magnitude = temp & 0x00FF;
		   if(sign == '-'){
			   magnitude = ~(magnitude);
			   magnitude = magnitude + 1;
 356:	81 95       	neg	r24
 358:	f3 cf       	rjmp	.-26     	; 0x340 <main+0x2a>

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
