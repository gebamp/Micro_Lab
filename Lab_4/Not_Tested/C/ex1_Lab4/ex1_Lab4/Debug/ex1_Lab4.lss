
ex1_Lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000021a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000024c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d28  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cc  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057b  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043d  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d0  00000000  00000000  00002195  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002965  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  64:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <one_wire_reset>:
	
	return;
}
unsigned char one_wire_reset(){
	unsigned char crc;
	DDRA  |=  (1 << PA4);
  6c:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
  6e:	dc 98       	cbi	0x1b, 4	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	8f eb       	ldi	r24, 0xBF	; 191
  72:	93 e0       	ldi	r25, 0x03	; 3
  74:	01 97       	sbiw	r24, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <one_wire_reset+0x8>
  78:	00 c0       	rjmp	.+0      	; 0x7a <one_wire_reset+0xe>
  7a:	00 00       	nop
	_delay_us(480);
	// mb DDRA= (0<<PA4)
	DDRA  &= ~(1 << PA4);
  7c:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
  7e:	dc 98       	cbi	0x1b, 4	; 27
  80:	e7 ec       	ldi	r30, 0xC7	; 199
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	31 97       	sbiw	r30, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <one_wire_reset+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <one_wire_reset+0x1e>
  8a:	00 00       	nop
	_delay_us(100);
	crc = PINA ;
  8c:	89 b3       	in	r24, 0x19	; 25
  8e:	e7 ef       	ldi	r30, 0xF7	; 247
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <one_wire_reset+0x26>
  96:	00 c0       	rjmp	.+0      	; 0x98 <one_wire_reset+0x2c>
  98:	00 00       	nop
  9a:	82 95       	swap	r24
  9c:	81 70       	andi	r24, 0x01	; 1
	}
	else{
		return 1;
	}	
	return -1;
}
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	89 27       	eor	r24, r25
  a2:	08 95       	ret

000000a4 <one_wire_transmit_bit>:

void one_wire_transmit_bit(unsigned char bit){
	DDRA  |=   (1<<PA4);
  a4:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1<<PA4);
  a6:	dc 98       	cbi	0x1b, 4	; 27
  a8:	95 e0       	ldi	r25, 0x05	; 5
  aa:	9a 95       	dec	r25
  ac:	f1 f7       	brne	.-4      	; 0xaa <one_wire_transmit_bit+0x6>
  ae:	00 00       	nop
	_delay_us(2);
	if((bit & 0x01)==0x01){
  b0:	80 ff       	sbrs	r24, 0
  b2:	0c c0       	rjmp	.+24     	; 0xcc <one_wire_transmit_bit+0x28>
		PORTA |= (1<<PA4);
  b4:	dc 9a       	sbi	0x1b, 4	; 27
  b6:	8a e9       	ldi	r24, 0x9A	; 154
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <one_wire_transmit_bit+0x14>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <one_wire_transmit_bit+0x1a>
	}
	if((bit & 0x01)==0x00){
		PORTA &= (1<<PA4);
	}
	_delay_us(58);
	DDRA  &= ~(1<<PA4);
  be:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1<<PA4);
  c0:	dc 98       	cbi	0x1b, 4	; 27
  c2:	92 e0       	ldi	r25, 0x02	; 2
  c4:	9a 95       	dec	r25
  c6:	f1 f7       	brne	.-4      	; 0xc4 <one_wire_transmit_bit+0x20>
  c8:	00 c0       	rjmp	.+0      	; 0xca <one_wire_transmit_bit+0x26>
	_delay_us(1);
} 
  ca:	08 95       	ret
	_delay_us(2);
	if((bit & 0x01)==0x01){
		PORTA |= (1<<PA4);
	}
	if((bit & 0x01)==0x00){
		PORTA &= (1<<PA4);
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	80 71       	andi	r24, 0x10	; 16
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	f1 cf       	rjmp	.-30     	; 0xb6 <one_wire_transmit_bit+0x12>

000000d4 <one_wire_transmit_byte>:
	DDRA  &= ~(1<<PA4);
	PORTA &= ~(1<<PA4);
	_delay_us(1);
} 

void one_wire_transmit_byte(unsigned char byte){
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
  dc:	08 e0       	ldi	r16, 0x08	; 8
  de:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char bit_to_send;
	for(int i=0; i<8; i++){
		bit_to_send = byte & 0x01;
		if(bit_to_send == 0){
  e0:	8c 2f       	mov	r24, r28
  e2:	81 70       	andi	r24, 0x01	; 1
  e4:	c0 fd       	sbrc	r28, 0
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <one_wire_transmit_byte+0x1c>
		one_wire_transmit_bit(0);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 52 00 	call	0xa4	; 0xa4 <one_wire_transmit_bit>
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <one_wire_transmit_byte+0x24>
		}
		else if(bit_to_send == 1){
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	11 f4       	brne	.+4      	; 0xf8 <one_wire_transmit_byte+0x24>
		one_wire_transmit_bit(1);
  f4:	0e 94 52 00 	call	0xa4	; 0xa4 <one_wire_transmit_bit>
		}
		byte = byte >> 1;
  f8:	c6 95       	lsr	r28
  fa:	01 50       	subi	r16, 0x01	; 1
  fc:	11 09       	sbc	r17, r1
	_delay_us(1);
} 

void one_wire_transmit_byte(unsigned char byte){
	unsigned char bit_to_send;
	for(int i=0; i<8; i++){
  fe:	81 f7       	brne	.-32     	; 0xe0 <one_wire_transmit_byte+0xc>
		else if(bit_to_send == 1){
		one_wire_transmit_bit(1);
		}
		byte = byte >> 1;
	}	
}
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	08 95       	ret

00000108 <one_wire_receive_bit>:
unsigned char one_wire_receive_bit(){
	unsigned char bit_to_return = 0;
	DDRA  |=  (1 << PA4);
 108:	d4 9a       	sbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 10a:	dc 98       	cbi	0x1b, 4	; 27
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <one_wire_receive_bit+0x6>
 112:	00 00       	nop
	_delay_us(2);
	DDRA  &= ~(1 << PA4);
 114:	d4 98       	cbi	0x1a, 4	; 26
	PORTA &= ~(1 << PA4);
 116:	dc 98       	cbi	0x1b, 4	; 27
 118:	9a e1       	ldi	r25, 0x1A	; 26
 11a:	9a 95       	dec	r25
 11c:	f1 f7       	brne	.-4      	; 0x11a <one_wire_receive_bit+0x12>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <one_wire_receive_bit+0x18>
	_delay_us(10);
	if( (PINA & 0X10) == 0x10 ){
 120:	89 b3       	in	r24, 0x19	; 25
 122:	92 e8       	ldi	r25, 0x82	; 130
 124:	9a 95       	dec	r25
 126:	f1 f7       	brne	.-4      	; 0x124 <one_wire_receive_bit+0x1c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <one_wire_receive_bit+0x22>
		bit_to_return = 1;
	}
	_delay_us(49);
	return bit_to_return;
}
 12a:	82 95       	swap	r24
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	08 95       	ret

00000130 <one_wire_receive_byte>:
unsigned char one_wire_receive_byte(){
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	08 e0       	ldi	r16, 0x08	; 8
 13a:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char bit_received,byte_to_return=0;
 13c:	80 e0       	ldi	r24, 0x00	; 0
	for(int i =0 ; i<8 ; i++){
		byte_to_return = byte_to_return >> 1;
		bit_received = one_wire_receive_bit();
		if(bit_received == 1){
			bit_received = 0x80;	
 13e:	d0 e8       	ldi	r29, 0x80	; 128
	return bit_to_return;
}
unsigned char one_wire_receive_byte(){
	unsigned char bit_received,byte_to_return=0;
	for(int i =0 ; i<8 ; i++){
		byte_to_return = byte_to_return >> 1;
 140:	c8 2f       	mov	r28, r24
 142:	c6 95       	lsr	r28
		bit_received = one_wire_receive_bit();
 144:	0e 94 84 00 	call	0x108	; 0x108 <one_wire_receive_bit>
		if(bit_received == 1){
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	09 f4       	brne	.+2      	; 0x14e <one_wire_receive_byte+0x1e>
			bit_received = 0x80;	
 14c:	8d 2f       	mov	r24, r29
		}
		byte_to_return= byte_to_return | bit_received ;
 14e:	8c 2b       	or	r24, r28
 150:	01 50       	subi	r16, 0x01	; 1
 152:	11 09       	sbc	r17, r1
	_delay_us(49);
	return bit_to_return;
}
unsigned char one_wire_receive_byte(){
	unsigned char bit_received,byte_to_return=0;
	for(int i =0 ; i<8 ; i++){
 154:	a9 f7       	brne	.-22     	; 0x140 <one_wire_receive_byte+0x10>
			bit_received = 0x80;	
		}
		byte_to_return= byte_to_return | bit_received ;
	}
	return byte_to_return;
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <return_temp>:
unsigned int return_temp(){
 160:	cf 93       	push	r28
	unsigned char crc,finished,temp,temp_sign;
	int sign;
	crc = one_wire_reset();
 162:	0e 94 36 00 	call	0x6c	; 0x6c <one_wire_reset>
    if(crc == 0x00){
 166:	88 23       	and	r24, r24
 168:	f9 f0       	breq	.+62     	; 0x1a8 <return_temp+0x48>
	   return 0x8000;
	}
	one_wire_transmit_byte(0xCC);
 16a:	8c ec       	ldi	r24, 0xCC	; 204
 16c:	0e 94 6a 00 	call	0xd4	; 0xd4 <one_wire_transmit_byte>
	one_wire_transmit_byte(0x44);
 170:	84 e4       	ldi	r24, 0x44	; 68
 172:	0e 94 6a 00 	call	0xd4	; 0xd4 <one_wire_transmit_byte>
	while(1){
		finished = one_wire_receive_bit();
 176:	0e 94 84 00 	call	0x108	; 0x108 <one_wire_receive_bit>
		if((finished & 0x01) == 0x01){
 17a:	80 ff       	sbrs	r24, 0
 17c:	fc cf       	rjmp	.-8      	; 0x176 <return_temp+0x16>
			break;
		}
	}
	crc = one_wire_reset();
 17e:	0e 94 36 00 	call	0x6c	; 0x6c <one_wire_reset>
	if(crc == 0x00){
 182:	88 23       	and	r24, r24
 184:	a1 f0       	breq	.+40     	; 0x1ae <return_temp+0x4e>
		return 0x8000;
	}
	one_wire_transmit_byte(0xCC);
 186:	8c ec       	ldi	r24, 0xCC	; 204
 188:	0e 94 6a 00 	call	0xd4	; 0xd4 <one_wire_transmit_byte>
	one_wire_transmit_byte(0xBE);
 18c:	8e eb       	ldi	r24, 0xBE	; 190
 18e:	0e 94 6a 00 	call	0xd4	; 0xd4 <one_wire_transmit_byte>
	temp = one_wire_receive_byte();
 192:	0e 94 98 00 	call	0x130	; 0x130 <one_wire_receive_byte>
 196:	c8 2f       	mov	r28, r24
	temp = temp >> 1 ;
	temp_sign = one_wire_receive_byte();
 198:	0e 94 98 00 	call	0x130	; 0x130 <one_wire_receive_byte>
	sign =  temp_sign;
 19c:	90 e0       	ldi	r25, 0x00	; 0
	sign = sign <<  8;
	sign = sign & 0xFF00;
	return  (sign | temp);
 19e:	98 2f       	mov	r25, r24
 1a0:	88 27       	eor	r24, r24
 1a2:	c6 95       	lsr	r28
 1a4:	8c 2b       	or	r24, r28
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <return_temp+0x52>
unsigned int return_temp(){
	unsigned char crc,finished,temp,temp_sign;
	int sign;
	crc = one_wire_reset();
    if(crc == 0x00){
	   return 0x8000;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e8       	ldi	r25, 0x80	; 128
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <return_temp+0x52>
			break;
		}
	}
	crc = one_wire_reset();
	if(crc == 0x00){
		return 0x8000;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e8       	ldi	r25, 0x80	; 128
	sign = sign <<  8;
	sign = sign & 0xFF00;
	return  (sign | temp);
	
		
}
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <main>:
int main(void)
{   int temp;
    DDRB = 0xFF;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		temp = return_temp();
 1ba:	0e 94 b0 00 	call	0x160	; 0x160 <return_temp>
		PORTB = temp;
 1be:	88 bb       	out	0x18, r24	; 24
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <main+0x4>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
