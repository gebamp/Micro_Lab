
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000009b2  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080006e  0080006e  00000a54  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f39  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082d  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd2  00000000  00000000  00003326  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ec  00000000  00000000  00003ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  000042e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d4  00000000  00000000  000048cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005aa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <main>
  8a:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <scan_row>:
	lcd_data('C');
	for(int i=0; i<4; i++){
		lcd_data(' ');
	}
	return;
}
  92:	28 e0       	ldi	r18, 0x08	; 8
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	02 c0       	rjmp	.+4      	; 0x9c <scan_row+0xa>
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	8a 95       	dec	r24
  9e:	e2 f7       	brpl	.-8      	; 0x98 <scan_row+0x6>
  a0:	25 bb       	out	0x15, r18	; 21
  a2:	00 00       	nop
  a4:	00 00       	nop
  a6:	83 b3       	in	r24, 0x13	; 19
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	08 95       	ret

000000ae <scan_keypad>:
  ae:	0f 93       	push	r16
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	0e 94 49 00 	call	0x92	; 0x92 <scan_row>
  bc:	ec 01       	movw	r28, r24
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	0e 94 49 00 	call	0x92	; 0x92 <scan_row>
  c4:	8c 01       	movw	r16, r24
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 49 00 	call	0x92	; 0x92 <scan_row>
  cc:	02 95       	swap	r16
  ce:	12 95       	swap	r17
  d0:	10 7f       	andi	r17, 0xF0	; 240
  d2:	10 27       	eor	r17, r16
  d4:	00 7f       	andi	r16, 0xF0	; 240
  d6:	10 27       	eor	r17, r16
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	38 2f       	mov	r19, r24
  de:	20 2b       	or	r18, r16
  e0:	31 2b       	or	r19, r17
  e2:	c2 2b       	or	r28, r18
  e4:	d3 2b       	or	r29, r19
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 49 00 	call	0x92	; 0x92 <scan_row>
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	38 2f       	mov	r19, r24
  f2:	32 95       	swap	r19
  f4:	30 7f       	andi	r19, 0xF0	; 240
  f6:	c9 01       	movw	r24, r18
  f8:	8c 2b       	or	r24, r28
  fa:	9d 2b       	or	r25, r29
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	08 95       	ret

00000106 <scan_keypad_rising_edge>:
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	0e 94 57 00 	call	0xae	; 0xae <scan_keypad>
 10e:	ec 01       	movw	r28, r24
 110:	2f e7       	ldi	r18, 0x7F	; 127
 112:	88 e3       	ldi	r24, 0x38	; 56
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <scan_keypad_rising_edge+0x10>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <scan_keypad_rising_edge+0x1a>
 120:	00 00       	nop
 122:	0e 94 57 00 	call	0xae	; 0xae <scan_keypad>
 126:	8c 23       	and	r24, r28
 128:	9d 23       	and	r25, r29
 12a:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <__data_end>
 12e:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <__data_end+0x1>
 132:	20 95       	com	r18
 134:	30 95       	com	r19
 136:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
 13a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
 13e:	82 23       	and	r24, r18
 140:	93 23       	and	r25, r19
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <keypad_to_ascii>:
 148:	80 fd       	sbrc	r24, 0
 14a:	20 c0       	rjmp	.+64     	; 0x18c <keypad_to_ascii+0x44>
 14c:	81 fd       	sbrc	r24, 1
 14e:	20 c0       	rjmp	.+64     	; 0x190 <keypad_to_ascii+0x48>
 150:	82 fd       	sbrc	r24, 2
 152:	20 c0       	rjmp	.+64     	; 0x194 <keypad_to_ascii+0x4c>
 154:	83 fd       	sbrc	r24, 3
 156:	20 c0       	rjmp	.+64     	; 0x198 <keypad_to_ascii+0x50>
 158:	84 fd       	sbrc	r24, 4
 15a:	20 c0       	rjmp	.+64     	; 0x19c <keypad_to_ascii+0x54>
 15c:	85 fd       	sbrc	r24, 5
 15e:	20 c0       	rjmp	.+64     	; 0x1a0 <keypad_to_ascii+0x58>
 160:	86 fd       	sbrc	r24, 6
 162:	20 c0       	rjmp	.+64     	; 0x1a4 <keypad_to_ascii+0x5c>
 164:	87 fd       	sbrc	r24, 7
 166:	20 c0       	rjmp	.+64     	; 0x1a8 <keypad_to_ascii+0x60>
 168:	90 fd       	sbrc	r25, 0
 16a:	20 c0       	rjmp	.+64     	; 0x1ac <keypad_to_ascii+0x64>
 16c:	91 fd       	sbrc	r25, 1
 16e:	20 c0       	rjmp	.+64     	; 0x1b0 <keypad_to_ascii+0x68>
 170:	92 fd       	sbrc	r25, 2
 172:	20 c0       	rjmp	.+64     	; 0x1b4 <keypad_to_ascii+0x6c>
 174:	93 fd       	sbrc	r25, 3
 176:	20 c0       	rjmp	.+64     	; 0x1b8 <keypad_to_ascii+0x70>
 178:	94 fd       	sbrc	r25, 4
 17a:	20 c0       	rjmp	.+64     	; 0x1bc <keypad_to_ascii+0x74>
 17c:	95 fd       	sbrc	r25, 5
 17e:	20 c0       	rjmp	.+64     	; 0x1c0 <keypad_to_ascii+0x78>
 180:	96 fd       	sbrc	r25, 6
 182:	20 c0       	rjmp	.+64     	; 0x1c4 <keypad_to_ascii+0x7c>
 184:	99 23       	and	r25, r25
 186:	04 f1       	brlt	.+64     	; 0x1c8 <keypad_to_ascii+0x80>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
 18c:	8a e2       	ldi	r24, 0x2A	; 42
 18e:	08 95       	ret
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	08 95       	ret
 194:	83 e2       	ldi	r24, 0x23	; 35
 196:	08 95       	ret
 198:	84 e4       	ldi	r24, 0x44	; 68
 19a:	08 95       	ret
 19c:	87 e3       	ldi	r24, 0x37	; 55
 19e:	08 95       	ret
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	08 95       	ret
 1a4:	89 e3       	ldi	r24, 0x39	; 57
 1a6:	08 95       	ret
 1a8:	83 e4       	ldi	r24, 0x43	; 67
 1aa:	08 95       	ret
 1ac:	84 e3       	ldi	r24, 0x34	; 52
 1ae:	08 95       	ret
 1b0:	85 e3       	ldi	r24, 0x35	; 53
 1b2:	08 95       	ret
 1b4:	86 e3       	ldi	r24, 0x36	; 54
 1b6:	08 95       	ret
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	08 95       	ret
 1bc:	81 e3       	ldi	r24, 0x31	; 49
 1be:	08 95       	ret
 1c0:	82 e3       	ldi	r24, 0x32	; 50
 1c2:	08 95       	ret
 1c4:	83 e3       	ldi	r24, 0x33	; 51
 1c6:	08 95       	ret
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	08 95       	ret

000001cc <usart_init>:
 1cc:	1b b8       	out	0x0b, r1	; 11
 1ce:	88 e1       	ldi	r24, 0x18	; 24
 1d0:	8a b9       	out	0x0a, r24	; 10
 1d2:	10 bc       	out	0x20, r1	; 32
 1d4:	83 e3       	ldi	r24, 0x33	; 51
 1d6:	89 b9       	out	0x09, r24	; 9
 1d8:	86 e8       	ldi	r24, 0x86	; 134
 1da:	80 bd       	out	0x20, r24	; 32
 1dc:	08 95       	ret

000001de <usart_transmit>:
 1de:	5d 9b       	sbis	0x0b, 5	; 11
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <usart_transmit>
 1e2:	8c b9       	out	0x0c, r24	; 12
 1e4:	08 95       	ret

000001e6 <usart_receive>:
 1e6:	5f 9b       	sbis	0x0b, 7	; 11
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <usart_receive>
 1ea:	8c b1       	in	r24, 0x0c	; 12
 1ec:	08 95       	ret

000001ee <write_2_nibbles>:
 1ee:	20 b3       	in	r18, 0x10	; 16
 1f0:	2f 70       	andi	r18, 0x0F	; 15
 1f2:	98 2f       	mov	r25, r24
 1f4:	90 7f       	andi	r25, 0xF0	; 240
 1f6:	92 2b       	or	r25, r18
 1f8:	92 bb       	out	0x12, r25	; 18
 1fa:	93 9a       	sbi	0x12, 3	; 18
 1fc:	93 98       	cbi	0x12, 3	; 18
 1fe:	30 e1       	ldi	r19, 0x10	; 16
 200:	83 9f       	mul	r24, r19
 202:	c0 01       	movw	r24, r0
 204:	11 24       	eor	r1, r1
 206:	82 2b       	or	r24, r18
 208:	82 bb       	out	0x12, r24	; 18
 20a:	93 9a       	sbi	0x12, 3	; 18
 20c:	93 98       	cbi	0x12, 3	; 18
 20e:	08 95       	ret

00000210 <lcd_data>:
 210:	92 9a       	sbi	0x12, 2	; 18
 212:	0e 94 f7 00 	call	0x1ee	; 0x1ee <write_2_nibbles>
 216:	82 e7       	ldi	r24, 0x72	; 114
 218:	8a 95       	dec	r24
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_data+0x8>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_data+0xe>
 21e:	08 95       	ret

00000220 <lcd_command>:
 220:	92 98       	cbi	0x12, 2	; 18
 222:	0e 94 f7 00 	call	0x1ee	; 0x1ee <write_2_nibbles>
 226:	88 e6       	ldi	r24, 0x68	; 104
 228:	8a 95       	dec	r24
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_command+0x8>
 22c:	08 95       	ret

0000022e <lcd_init>:
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	89 ef       	ldi	r24, 0xF9	; 249
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <lcd_init+0x6>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_init+0x10>
 23e:	00 00       	nop
 240:	80 e3       	ldi	r24, 0x30	; 48
 242:	82 bb       	out	0x12, r24	; 18
 244:	93 9a       	sbi	0x12, 3	; 18
 246:	93 98       	cbi	0x12, 3	; 18
 248:	28 e6       	ldi	r18, 0x68	; 104
 24a:	2a 95       	dec	r18
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x1c>
 24e:	82 bb       	out	0x12, r24	; 18
 250:	93 9a       	sbi	0x12, 3	; 18
 252:	93 98       	cbi	0x12, 3	; 18
 254:	85 e3       	ldi	r24, 0x35	; 53
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x28>
 25a:	00 00       	nop
 25c:	80 e2       	ldi	r24, 0x20	; 32
 25e:	82 bb       	out	0x12, r24	; 18
 260:	93 9a       	sbi	0x12, 3	; 18
 262:	93 98       	cbi	0x12, 3	; 18
 264:	98 e6       	ldi	r25, 0x68	; 104
 266:	9a 95       	dec	r25
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_init+0x38>
 26a:	88 e2       	ldi	r24, 0x28	; 40
 26c:	0e 94 10 01 	call	0x220	; 0x220 <lcd_command>
 270:	8c e0       	ldi	r24, 0x0C	; 12
 272:	0e 94 10 01 	call	0x220	; 0x220 <lcd_command>
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 10 01 	call	0x220	; 0x220 <lcd_command>
 27c:	83 ef       	ldi	r24, 0xF3	; 243
 27e:	9b e0       	ldi	r25, 0x0B	; 11
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <lcd_init+0x52>
 284:	00 c0       	rjmp	.+0      	; 0x286 <lcd_init+0x58>
 286:	00 00       	nop
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 10 01 	call	0x220	; 0x220 <lcd_command>
 28e:	08 95       	ret

00000290 <one_wire_reset>:
 290:	d4 9a       	sbi	0x1a, 4	; 26
 292:	dc 98       	cbi	0x1b, 4	; 27
 294:	8f eb       	ldi	r24, 0xBF	; 191
 296:	93 e0       	ldi	r25, 0x03	; 3
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <one_wire_reset+0x8>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <one_wire_reset+0xe>
 29e:	00 00       	nop
 2a0:	d4 98       	cbi	0x1a, 4	; 26
 2a2:	dc 98       	cbi	0x1b, 4	; 27
 2a4:	e7 ec       	ldi	r30, 0xC7	; 199
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	31 97       	sbiw	r30, 0x01	; 1
 2aa:	f1 f7       	brne	.-4      	; 0x2a8 <one_wire_reset+0x18>
 2ac:	00 c0       	rjmp	.+0      	; 0x2ae <one_wire_reset+0x1e>
 2ae:	00 00       	nop
 2b0:	89 b3       	in	r24, 0x19	; 25
 2b2:	e7 ef       	ldi	r30, 0xF7	; 247
 2b4:	f2 e0       	ldi	r31, 0x02	; 2
 2b6:	31 97       	sbiw	r30, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <one_wire_reset+0x26>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <one_wire_reset+0x2c>
 2bc:	00 00       	nop
 2be:	82 95       	swap	r24
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	89 27       	eor	r24, r25
 2c6:	08 95       	ret

000002c8 <one_wire_transmit_bit>:
 2c8:	d4 9a       	sbi	0x1a, 4	; 26
 2ca:	dc 98       	cbi	0x1b, 4	; 27
 2cc:	95 e0       	ldi	r25, 0x05	; 5
 2ce:	9a 95       	dec	r25
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <one_wire_transmit_bit+0x6>
 2d2:	00 00       	nop
 2d4:	80 ff       	sbrs	r24, 0
 2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <one_wire_transmit_bit+0x28>
 2d8:	dc 9a       	sbi	0x1b, 4	; 27
 2da:	8a e9       	ldi	r24, 0x9A	; 154
 2dc:	8a 95       	dec	r24
 2de:	f1 f7       	brne	.-4      	; 0x2dc <one_wire_transmit_bit+0x14>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <one_wire_transmit_bit+0x1a>
 2e2:	d4 98       	cbi	0x1a, 4	; 26
 2e4:	dc 98       	cbi	0x1b, 4	; 27
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	9a 95       	dec	r25
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <one_wire_transmit_bit+0x20>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <one_wire_transmit_bit+0x26>
 2ee:	08 95       	ret
 2f0:	8b b3       	in	r24, 0x1b	; 27
 2f2:	80 71       	andi	r24, 0x10	; 16
 2f4:	8b bb       	out	0x1b, r24	; 27
 2f6:	f1 cf       	rjmp	.-30     	; 0x2da <one_wire_transmit_bit+0x12>

000002f8 <one_wire_transmit_byte>:
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	c8 2f       	mov	r28, r24
 300:	08 e0       	ldi	r16, 0x08	; 8
 302:	10 e0       	ldi	r17, 0x00	; 0
 304:	8c 2f       	mov	r24, r28
 306:	81 70       	andi	r24, 0x01	; 1
 308:	c0 fd       	sbrc	r28, 0
 30a:	04 c0       	rjmp	.+8      	; 0x314 <one_wire_transmit_byte+0x1c>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 64 01 	call	0x2c8	; 0x2c8 <one_wire_transmit_bit>
 312:	04 c0       	rjmp	.+8      	; 0x31c <one_wire_transmit_byte+0x24>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	11 f4       	brne	.+4      	; 0x31c <one_wire_transmit_byte+0x24>
 318:	0e 94 64 01 	call	0x2c8	; 0x2c8 <one_wire_transmit_bit>
 31c:	c6 95       	lsr	r28
 31e:	01 50       	subi	r16, 0x01	; 1
 320:	11 09       	sbc	r17, r1
 322:	81 f7       	brne	.-32     	; 0x304 <one_wire_transmit_byte+0xc>
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	08 95       	ret

0000032c <one_wire_receive_bit>:
 32c:	d4 9a       	sbi	0x1a, 4	; 26
 32e:	dc 98       	cbi	0x1b, 4	; 27
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	8a 95       	dec	r24
 334:	f1 f7       	brne	.-4      	; 0x332 <one_wire_receive_bit+0x6>
 336:	00 00       	nop
 338:	d4 98       	cbi	0x1a, 4	; 26
 33a:	dc 98       	cbi	0x1b, 4	; 27
 33c:	9a e1       	ldi	r25, 0x1A	; 26
 33e:	9a 95       	dec	r25
 340:	f1 f7       	brne	.-4      	; 0x33e <one_wire_receive_bit+0x12>
 342:	00 c0       	rjmp	.+0      	; 0x344 <one_wire_receive_bit+0x18>
 344:	89 b3       	in	r24, 0x19	; 25
 346:	92 e8       	ldi	r25, 0x82	; 130
 348:	9a 95       	dec	r25
 34a:	f1 f7       	brne	.-4      	; 0x348 <one_wire_receive_bit+0x1c>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <one_wire_receive_bit+0x22>
 34e:	82 95       	swap	r24
 350:	81 70       	andi	r24, 0x01	; 1
 352:	08 95       	ret

00000354 <one_wire_receive_byte>:
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	08 e0       	ldi	r16, 0x08	; 8
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	d0 e8       	ldi	r29, 0x80	; 128
 364:	c8 2f       	mov	r28, r24
 366:	c6 95       	lsr	r28
 368:	0e 94 96 01 	call	0x32c	; 0x32c <one_wire_receive_bit>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	09 f4       	brne	.+2      	; 0x372 <one_wire_receive_byte+0x1e>
 370:	8d 2f       	mov	r24, r29
 372:	8c 2b       	or	r24, r28
 374:	01 50       	subi	r16, 0x01	; 1
 376:	11 09       	sbc	r17, r1
 378:	a9 f7       	brne	.-22     	; 0x364 <one_wire_receive_byte+0x10>
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <return_temp>:
 384:	cf 93       	push	r28
 386:	0e 94 48 01 	call	0x290	; 0x290 <one_wire_reset>
 38a:	88 23       	and	r24, r24
 38c:	f9 f0       	breq	.+62     	; 0x3cc <return_temp+0x48>
 38e:	8c ec       	ldi	r24, 0xCC	; 204
 390:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <one_wire_transmit_byte>
 394:	84 e4       	ldi	r24, 0x44	; 68
 396:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <one_wire_transmit_byte>
 39a:	0e 94 96 01 	call	0x32c	; 0x32c <one_wire_receive_bit>
 39e:	80 ff       	sbrs	r24, 0
 3a0:	fc cf       	rjmp	.-8      	; 0x39a <return_temp+0x16>
 3a2:	0e 94 48 01 	call	0x290	; 0x290 <one_wire_reset>
 3a6:	88 23       	and	r24, r24
 3a8:	a1 f0       	breq	.+40     	; 0x3d2 <return_temp+0x4e>
 3aa:	8c ec       	ldi	r24, 0xCC	; 204
 3ac:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <one_wire_transmit_byte>
 3b0:	8e eb       	ldi	r24, 0xBE	; 190
 3b2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <one_wire_transmit_byte>
 3b6:	0e 94 aa 01 	call	0x354	; 0x354 <one_wire_receive_byte>
 3ba:	c8 2f       	mov	r28, r24
 3bc:	0e 94 aa 01 	call	0x354	; 0x354 <one_wire_receive_byte>
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	98 2f       	mov	r25, r24
 3c4:	88 27       	eor	r24, r24
 3c6:	c6 95       	lsr	r28
 3c8:	8c 2b       	or	r24, r28
 3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <return_temp+0x52>
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e8       	ldi	r25, 0x80	; 128
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <return_temp+0x52>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e8       	ldi	r25, 0x80	; 128
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <no_device>:
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	0e 94 10 01 	call	0x220	; 0x220 <lcd_command>
 3e0:	8e e4       	ldi	r24, 0x4E	; 78
 3e2:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 3e6:	8f e4       	ldi	r24, 0x4F	; 79
 3e8:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 3ec:	80 e2       	ldi	r24, 0x20	; 32
 3ee:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 3f2:	84 e4       	ldi	r24, 0x44	; 68
 3f4:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 3f8:	85 e4       	ldi	r24, 0x45	; 69
 3fa:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 3fe:	86 e5       	ldi	r24, 0x56	; 86
 400:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 404:	89 e4       	ldi	r24, 0x49	; 73
 406:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 40a:	83 e4       	ldi	r24, 0x43	; 67
 40c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 410:	85 e4       	ldi	r24, 0x45	; 69
 412:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
 416:	08 95       	ret

00000418 <get_digits>:
void get_digits(char number){
	if(number>=100){
 418:	84 36       	cpi	r24, 0x64	; 100
 41a:	30 f0       	brcs	.+12     	; 0x428 <get_digits+0x10>
		hun++;
 41c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <hun>
 420:	9f 5f       	subi	r25, 0xFF	; 255
 422:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <hun>
		number = number -100;
 426:	84 56       	subi	r24, 0x64	; 100
	}
	while(number >=10){
 428:	8a 30       	cpi	r24, 0x0A	; 10
 42a:	60 f0       	brcs	.+24     	; 0x444 <get_digits+0x2c>
 42c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <dec>
 430:	9f 5f       	subi	r25, 0xFF	; 255
 432:	01 c0       	rjmp	.+2      	; 0x436 <get_digits+0x1e>
 434:	92 2f       	mov	r25, r18
		dec++;
		number = number -10;
 436:	8a 50       	subi	r24, 0x0A	; 10
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	29 0f       	add	r18, r25
void get_digits(char number){
	if(number>=100){
		hun++;
		number = number -100;
	}
	while(number >=10){
 43c:	8a 30       	cpi	r24, 0x0A	; 10
 43e:	d0 f7       	brcc	.-12     	; 0x434 <get_digits+0x1c>
 440:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <dec>
		dec++;
		number = number -10;
	}
	mon = number;
 444:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <mon>
 448:	08 95       	ret

0000044a <usart_receive_string>:
	return;
}
void usart_receive_string(char  *input_buffer){
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	ec 01       	movw	r28, r24
	
	while(1){
	/*
	Mb check if first is S or F and then 
	determine how many bits you should read	*/	
		input_buffer[i] = usart_receive();
 454:	8e 01       	movw	r16, r28
 456:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <usart_receive>
 45a:	89 93       	st	Y+, r24
		// mb change '\n' to '\0'
		if(input_buffer[i] != '\n'){
 45c:	8a 30       	cpi	r24, 0x0A	; 10
 45e:	d1 f7       	brne	.-12     	; 0x454 <usart_receive_string+0xa>
			i++;
		}
		else{
			input_buffer[i] = '\0';
 460:	f8 01       	movw	r30, r16
 462:	10 82       	st	Z, r1
			break;
		}
	}
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	08 95       	ret

0000046e <setup_teamname>:

void  setup_teamname(){
	usart_transmit('t');
 46e:	84 e7       	ldi	r24, 0x74	; 116
 470:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 474:	85 e6       	ldi	r24, 0x65	; 101
 476:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 47a:	81 e6       	ldi	r24, 0x61	; 97
 47c:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('m');
 480:	8d e6       	ldi	r24, 0x6D	; 109
 482:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('n');
 486:	8e e6       	ldi	r24, 0x6E	; 110
 488:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 48c:	81 e6       	ldi	r24, 0x61	; 97
 48e:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('m');
 492:	8d e6       	ldi	r24, 0x6D	; 109
 494:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 498:	85 e6       	ldi	r24, 0x65	; 101
 49a:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit(':');
 49e:	8a e3       	ldi	r24, 0x3A	; 58
 4a0:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('G');
 4a4:	87 e4       	ldi	r24, 0x47	; 71
 4a6:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('9');
 4aa:	89 e3       	ldi	r24, 0x39	; 57
 4ac:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('\n');
 4b0:	8a e0       	ldi	r24, 0x0A	; 10
 4b2:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
 4b6:	08 95       	ret

000004b8 <setup_connection>:
}
void setup_connection(){
	usart_transmit('c');
 4b8:	83 e6       	ldi	r24, 0x63	; 99
 4ba:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('o');
 4be:	8f e6       	ldi	r24, 0x6F	; 111
 4c0:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('n');
 4c4:	8e e6       	ldi	r24, 0x6E	; 110
 4c6:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('n');
 4ca:	8e e6       	ldi	r24, 0x6E	; 110
 4cc:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 4d0:	85 e6       	ldi	r24, 0x65	; 101
 4d2:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('c');
 4d6:	83 e6       	ldi	r24, 0x63	; 99
 4d8:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('t');
 4dc:	84 e7       	ldi	r24, 0x74	; 116
 4de:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('\n');	
 4e2:	8a e0       	ldi	r24, 0x0A	; 10
 4e4:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
 4e8:	08 95       	ret

000004ea <lcd_success>:
}
void lcd_success(char number){
 4ea:	cf 93       	push	r28
 4ec:	c8 2f       	mov	r28, r24
	lcd_command(0x02);
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	0e 94 10 01 	call	0x220	; 0x220 <lcd_command>
	lcd_data(number);
 4f4:	8c 2f       	mov	r24, r28
 4f6:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('.');
 4fa:	8e e2       	ldi	r24, 0x2E	; 46
 4fc:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('S');
 500:	83 e5       	ldi	r24, 0x53	; 83
 502:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('u');
 506:	85 e7       	ldi	r24, 0x75	; 117
 508:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('c');
 50c:	83 e6       	ldi	r24, 0x63	; 99
 50e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('c');
 512:	83 e6       	ldi	r24, 0x63	; 99
 514:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('e');
 518:	85 e6       	ldi	r24, 0x65	; 101
 51a:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('s');
 51e:	83 e7       	ldi	r24, 0x73	; 115
 520:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('s');
 524:	83 e7       	ldi	r24, 0x73	; 115
 526:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
}
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <lcd_fail>:
void lcd_fail(char number){
 52e:	cf 93       	push	r28
 530:	c8 2f       	mov	r28, r24
	lcd_command(0x02);
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	0e 94 10 01 	call	0x220	; 0x220 <lcd_command>
	lcd_data(number);
 538:	8c 2f       	mov	r24, r28
 53a:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('.');
 53e:	8e e2       	ldi	r24, 0x2E	; 46
 540:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('F');
 544:	86 e4       	ldi	r24, 0x46	; 70
 546:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('a');
 54a:	81 e6       	ldi	r24, 0x61	; 97
 54c:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('i');
 550:	89 e6       	ldi	r24, 0x69	; 105
 552:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data('l');
 556:	8c e6       	ldi	r24, 0x6C	; 108
 558:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data(' ');
 55c:	80 e2       	ldi	r24, 0x20	; 32
 55e:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data(' ');
 562:	80 e2       	ldi	r24, 0x20	; 32
 564:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
	lcd_data(' ');
 568:	80 e2       	ldi	r24, 0x20	; 32
 56a:	0e 94 08 01 	call	0x210	; 0x210 <lcd_data>
}
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <trasmit_temp_usart>:
void trasmit_temp_usart(char first_digit,char second_digit){
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
 576:	d8 2f       	mov	r29, r24
 578:	c6 2f       	mov	r28, r22
	usart_transmit('p');
 57a:	80 e7       	ldi	r24, 0x70	; 112
 57c:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 580:	81 e6       	ldi	r24, 0x61	; 97
 582:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('y');
 586:	89 e7       	ldi	r24, 0x79	; 121
 588:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('l');
 58c:	8c e6       	ldi	r24, 0x6C	; 108
 58e:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('o');
 592:	8f e6       	ldi	r24, 0x6F	; 111
 594:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 598:	81 e6       	ldi	r24, 0x61	; 97
 59a:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('d');
 59e:	84 e6       	ldi	r24, 0x64	; 100
 5a0:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('[');
 5a4:	8b e5       	ldi	r24, 0x5B	; 91
 5a6:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('{');
 5aa:	8b e7       	ldi	r24, 0x7B	; 123
 5ac:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('"');
 5b0:	82 e2       	ldi	r24, 0x22	; 34
 5b2:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('n');
 5b6:	8e e6       	ldi	r24, 0x6E	; 110
 5b8:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 5bc:	81 e6       	ldi	r24, 0x61	; 97
 5be:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('m');
 5c2:	8d e6       	ldi	r24, 0x6D	; 109
 5c4:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 5c8:	85 e6       	ldi	r24, 0x65	; 101
 5ca:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('"');
 5ce:	82 e2       	ldi	r24, 0x22	; 34
 5d0:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit(':');
 5d4:	8a e3       	ldi	r24, 0x3A	; 58
 5d6:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('"');
 5da:	82 e2       	ldi	r24, 0x22	; 34
 5dc:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('T');
 5e0:	84 e5       	ldi	r24, 0x54	; 84
 5e2:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 5e6:	85 e6       	ldi	r24, 0x65	; 101
 5e8:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('m');
 5ec:	8d e6       	ldi	r24, 0x6D	; 109
 5ee:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('p');
 5f2:	80 e7       	ldi	r24, 0x70	; 112
 5f4:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 5f8:	85 e6       	ldi	r24, 0x65	; 101
 5fa:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('r');
 5fe:	82 e7       	ldi	r24, 0x72	; 114
 600:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 604:	81 e6       	ldi	r24, 0x61	; 97
 606:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('t');
 60a:	84 e7       	ldi	r24, 0x74	; 116
 60c:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('u');
 610:	85 e7       	ldi	r24, 0x75	; 117
 612:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('r');
 616:	82 e7       	ldi	r24, 0x72	; 114
 618:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 61c:	85 e6       	ldi	r24, 0x65	; 101
 61e:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('"');
 622:	82 e2       	ldi	r24, 0x22	; 34
 624:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit(',');
 628:	8c e2       	ldi	r24, 0x2C	; 44
 62a:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('"');
 62e:	82 e2       	ldi	r24, 0x22	; 34
 630:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('v');
 634:	86 e7       	ldi	r24, 0x76	; 118
 636:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 63a:	81 e6       	ldi	r24, 0x61	; 97
 63c:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('l');
 640:	8c e6       	ldi	r24, 0x6C	; 108
 642:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('u');
 646:	85 e7       	ldi	r24, 0x75	; 117
 648:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 64c:	85 e6       	ldi	r24, 0x65	; 101
 64e:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('"');
 652:	82 e2       	ldi	r24, 0x22	; 34
 654:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit(':');
 658:	8a e3       	ldi	r24, 0x3A	; 58
 65a:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit(first_digit);
 65e:	8d 2f       	mov	r24, r29
 660:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit(second_digit);
 664:	8c 2f       	mov	r24, r28
 666:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('\n');
 66a:	8a e0       	ldi	r24, 0x0A	; 10
 66c:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
}
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <setup_team_status>:
void setup_team_status(char flag){
 676:	cf 93       	push	r28
 678:	c8 2f       	mov	r28, r24
	usart_transmit('r');
 67a:	82 e7       	ldi	r24, 0x72	; 114
 67c:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 680:	85 e6       	ldi	r24, 0x65	; 101
 682:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 686:	81 e6       	ldi	r24, 0x61	; 97
 688:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('d');
 68c:	84 e6       	ldi	r24, 0x64	; 100
 68e:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('y');
 692:	89 e7       	ldi	r24, 0x79	; 121
 694:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit(':');
 698:	8a e3       	ldi	r24, 0x3A	; 58
 69a:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	if(flag == 'T'){
 69e:	c4 35       	cpi	r28, 0x54	; 84
 6a0:	69 f4       	brne	.+26     	; 0x6bc <setup_team_status+0x46>
	usart_transmit('t');
 6a2:	84 e7       	ldi	r24, 0x74	; 116
 6a4:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('r');
 6a8:	82 e7       	ldi	r24, 0x72	; 114
 6aa:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('u');
 6ae:	85 e7       	ldi	r24, 0x75	; 117
 6b0:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 6b4:	85 e6       	ldi	r24, 0x65	; 101
 6b6:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
 6ba:	0f c0       	rjmp	.+30     	; 0x6da <setup_team_status+0x64>
	}
	else{
	usart_transmit('f');
 6bc:	86 e6       	ldi	r24, 0x66	; 102
 6be:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('a');
 6c2:	81 e6       	ldi	r24, 0x61	; 97
 6c4:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('l');
 6c8:	8c e6       	ldi	r24, 0x6C	; 108
 6ca:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('s');
 6ce:	83 e7       	ldi	r24, 0x73	; 115
 6d0:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	usart_transmit('e');
 6d4:	85 e6       	ldi	r24, 0x65	; 101
 6d6:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	}
	usart_transmit('\n');
 6da:	8a e0       	ldi	r24, 0x0A	; 10
 6dc:	0e 94 ef 00 	call	0x1de	; 0x1de <usart_transmit>
	return;
}
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <__vector_8>:
ISR(TIMER1_OVF_vect)
{   //Timer ISR when timer interrupts is set disable timer interrupts and turn off the leds of portb
 6e4:	1f 92       	push	r1
 6e6:	0f 92       	push	r0
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	0f 92       	push	r0
 6ec:	11 24       	eor	r1, r1
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	2f 93       	push	r18
 6f4:	3f 93       	push	r19
 6f6:	4f 93       	push	r20
 6f8:	5f 93       	push	r21
 6fa:	6f 93       	push	r22
 6fc:	7f 93       	push	r23
 6fe:	8f 93       	push	r24
 700:	9f 93       	push	r25
 702:	af 93       	push	r26
 704:	bf 93       	push	r27
 706:	ef 93       	push	r30
 708:	ff 93       	push	r31
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	c4 56       	subi	r28, 0x64	; 100
 714:	d1 09       	sbc	r29, r1
 716:	de bf       	out	0x3e, r29	; 62
 718:	cd bf       	out	0x3d, r28	; 61
	cli();
 71a:	f8 94       	cli
	char input_buffer[100];
	char team_number = keypad_to_ascii(scan_keypad_rising_edge());
 71c:	0e 94 83 00 	call	0x106	; 0x106 <scan_keypad_rising_edge>
 720:	0e 94 a4 00 	call	0x148	; 0x148 <keypad_to_ascii>
	if(team_number=='9'){
 724:	89 33       	cpi	r24, 0x39	; 57
 726:	21 f4       	brne	.+8      	; 0x730 <__vector_8+0x4c>
		setup_team_status('T');
 728:	84 e5       	ldi	r24, 0x54	; 84
 72a:	0e 94 3b 03 	call	0x676	; 0x676 <setup_team_status>
 72e:	03 c0       	rjmp	.+6      	; 0x736 <__vector_8+0x52>
	}
	else{
		setup_team_status('F');
 730:	86 e4       	ldi	r24, 0x46	; 70
 732:	0e 94 3b 03 	call	0x676	; 0x676 <setup_team_status>
	}
	memset(input_buffer,0,sizeof(input_buffer));
 736:	8e 01       	movw	r16, r28
 738:	0f 5f       	subi	r16, 0xFF	; 255
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	84 e6       	ldi	r24, 0x64	; 100
 73e:	f8 01       	movw	r30, r16
 740:	11 92       	st	Z+, r1
 742:	8a 95       	dec	r24
 744:	e9 f7       	brne	.-6      	; 0x740 <__vector_8+0x5c>
	usart_receive_string(input_buffer);
 746:	c8 01       	movw	r24, r16
 748:	0e 94 25 02 	call	0x44a	; 0x44a <usart_receive_string>
	if(strcmp(input_buffer,"Success")!= 0){
 74c:	60 e6       	ldi	r22, 0x60	; 96
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	c8 01       	movw	r24, r16
 752:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 756:	89 2b       	or	r24, r25
 758:	21 f0       	breq	.+8      	; 0x762 <__vector_8+0x7e>
		lcd_success('4');
 75a:	84 e3       	ldi	r24, 0x34	; 52
 75c:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_success>
 760:	0b c0       	rjmp	.+22     	; 0x778 <__vector_8+0x94>
	}
	else if(strcmp(input_buffer,"Fail")!= 0){
 762:	68 e6       	ldi	r22, 0x68	; 104
 764:	70 e0       	ldi	r23, 0x00	; 0
 766:	ce 01       	movw	r24, r28
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 76e:	89 2b       	or	r24, r25
 770:	19 f0       	breq	.+6      	; 0x778 <__vector_8+0x94>
		lcd_fail('4');
 772:	84 e3       	ldi	r24, 0x34	; 52
 774:	0e 94 97 02 	call	0x52e	; 0x52e <lcd_fail>
	}
	TIMSK = (1<<TOIE1);
 778:	84 e0       	ldi	r24, 0x04	; 4
 77a:	89 bf       	out	0x39, r24	; 57
	TCCR1B = ((0<<CS12)|(1<<CS11)|(0<<CS10));
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	8e bd       	out	0x2e, r24	; 46
	TCNT1H = 0XFF;
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0XFB;
 784:	8b ef       	ldi	r24, 0xFB	; 251
 786:	8c bd       	out	0x2c, r24	; 44
	sei();
 788:	78 94       	sei
}
 78a:	cc 59       	subi	r28, 0x9C	; 156
 78c:	df 4f       	sbci	r29, 0xFF	; 255
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	ff 91       	pop	r31
 79e:	ef 91       	pop	r30
 7a0:	bf 91       	pop	r27
 7a2:	af 91       	pop	r26
 7a4:	9f 91       	pop	r25
 7a6:	8f 91       	pop	r24
 7a8:	7f 91       	pop	r23
 7aa:	6f 91       	pop	r22
 7ac:	5f 91       	pop	r21
 7ae:	4f 91       	pop	r20
 7b0:	3f 91       	pop	r19
 7b2:	2f 91       	pop	r18
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	0f 90       	pop	r0
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	0f 90       	pop	r0
 7be:	1f 90       	pop	r1
 7c0:	18 95       	reti

000007c2 <main>:
int main(void)
{   unsigned char sign,magnitude,sign_ext;
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	c4 56       	subi	r28, 0x64	; 100
 7cc:	d1 09       	sbc	r29, r1
 7ce:	0f b6       	in	r0, 0x3f	; 63
 7d0:	f8 94       	cli
 7d2:	de bf       	out	0x3e, r29	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	cd bf       	out	0x3d, r28	; 61
	char input_buffer[100];
	char team_number;
	int temp;
	//input_buffer = temp_buffer;
	//char temp_buffer[100];	
	DDRD=0XFF;
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xF0;
 7dc:	80 ef       	ldi	r24, 0xF0	; 240
 7de:	84 bb       	out	0x14, r24	; 20
	usart_init();
 7e0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <usart_init>
	lcd_init();
 7e4:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_init>
	setup_teamname();
 7e8:	0e 94 37 02 	call	0x46e	; 0x46e <setup_teamname>
	memset(input_buffer,0,sizeof(input_buffer));
 7ec:	8e 01       	movw	r16, r28
 7ee:	0f 5f       	subi	r16, 0xFF	; 255
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	84 e6       	ldi	r24, 0x64	; 100
 7f4:	d8 01       	movw	r26, r16
 7f6:	1d 92       	st	X+, r1
 7f8:	8a 95       	dec	r24
 7fa:	e9 f7       	brne	.-6      	; 0x7f6 <main+0x34>
	usart_receive_string(input_buffer);
 7fc:	c8 01       	movw	r24, r16
 7fe:	0e 94 25 02 	call	0x44a	; 0x44a <usart_receive_string>
	if(strcmp(input_buffer,"Success")!= 0){
 802:	60 e6       	ldi	r22, 0x60	; 96
 804:	70 e0       	ldi	r23, 0x00	; 0
 806:	c8 01       	movw	r24, r16
 808:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 80c:	89 2b       	or	r24, r25
 80e:	21 f0       	breq	.+8      	; 0x818 <main+0x56>
		lcd_success('1');
 810:	81 e3       	ldi	r24, 0x31	; 49
 812:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_success>
 816:	0b c0       	rjmp	.+22     	; 0x82e <main+0x6c>
	}
	else if(strcmp(input_buffer,"Fail")!= 0){
 818:	68 e6       	ldi	r22, 0x68	; 104
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	ce 01       	movw	r24, r28
 81e:	01 96       	adiw	r24, 0x01	; 1
 820:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 824:	89 2b       	or	r24, r25
 826:	19 f0       	breq	.+6      	; 0x82e <main+0x6c>
		lcd_fail('1');
 828:	81 e3       	ldi	r24, 0x31	; 49
 82a:	0e 94 97 02 	call	0x52e	; 0x52e <lcd_fail>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 82e:	bf ef       	ldi	r27, 0xFF	; 255
 830:	e9 e6       	ldi	r30, 0x69	; 105
 832:	f8 e1       	ldi	r31, 0x18	; 24
 834:	b1 50       	subi	r27, 0x01	; 1
 836:	e0 40       	sbci	r30, 0x00	; 0
 838:	f0 40       	sbci	r31, 0x00	; 0
 83a:	e1 f7       	brne	.-8      	; 0x834 <main+0x72>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0x7c>
 83e:	00 00       	nop
	}
	_delay_ms(1000);
	memset(input_buffer,0,sizeof(input_buffer));
 840:	8e 01       	movw	r16, r28
 842:	0f 5f       	subi	r16, 0xFF	; 255
 844:	1f 4f       	sbci	r17, 0xFF	; 255
 846:	84 e6       	ldi	r24, 0x64	; 100
 848:	d8 01       	movw	r26, r16
 84a:	1d 92       	st	X+, r1
 84c:	8a 95       	dec	r24
 84e:	e9 f7       	brne	.-6      	; 0x84a <main+0x88>
	setup_connection();
 850:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <setup_connection>
	usart_receive_string(input_buffer);
 854:	c8 01       	movw	r24, r16
 856:	0e 94 25 02 	call	0x44a	; 0x44a <usart_receive_string>
	if(strcmp(input_buffer,"Success")!= 0){
 85a:	60 e6       	ldi	r22, 0x60	; 96
 85c:	70 e0       	ldi	r23, 0x00	; 0
 85e:	c8 01       	movw	r24, r16
 860:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 864:	89 2b       	or	r24, r25
 866:	21 f0       	breq	.+8      	; 0x870 <main+0xae>
		lcd_success('2');
 868:	82 e3       	ldi	r24, 0x32	; 50
 86a:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_success>
 86e:	0b c0       	rjmp	.+22     	; 0x886 <main+0xc4>
	}
	else if(strcmp(input_buffer,"Fail")!= 0){
 870:	68 e6       	ldi	r22, 0x68	; 104
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	ce 01       	movw	r24, r28
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 87c:	89 2b       	or	r24, r25
 87e:	19 f0       	breq	.+6      	; 0x886 <main+0xc4>
		lcd_fail('2');
 880:	82 e3       	ldi	r24, 0x32	; 50
 882:	0e 94 97 02 	call	0x52e	; 0x52e <lcd_fail>
 886:	bf ef       	ldi	r27, 0xFF	; 255
 888:	e9 e6       	ldi	r30, 0x69	; 105
 88a:	f8 e1       	ldi	r31, 0x18	; 24
 88c:	b1 50       	subi	r27, 0x01	; 1
 88e:	e0 40       	sbci	r30, 0x00	; 0
 890:	f0 40       	sbci	r31, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <main+0xca>
 894:	00 c0       	rjmp	.+0      	; 0x896 <main+0xd4>
 896:	00 00       	nop
	}
	_delay_ms(1000);
	memset(input_buffer,0,sizeof(input_buffer));
 898:	fe 01       	movw	r30, r28
 89a:	31 96       	adiw	r30, 0x01	; 1
 89c:	84 e6       	ldi	r24, 0x64	; 100
 89e:	df 01       	movw	r26, r30
 8a0:	1d 92       	st	X+, r1
 8a2:	8a 95       	dec	r24
 8a4:	e9 f7       	brne	.-6      	; 0x8a0 <main+0xde>
				magnitude = ~(magnitude);
				magnitude = magnitude + 1;
			}
			get_digits(magnitude); 
			trasmit_temp_usart(dec+0x30,mon+0x30);
			memset(input_buffer,0,sizeof(input_buffer));
 8a6:	0f 2e       	mov	r0, r31
 8a8:	f4 e6       	ldi	r31, 0x64	; 100
 8aa:	ff 2e       	mov	r15, r31
 8ac:	f0 2d       	mov	r31, r0
 8ae:	8f 01       	movw	r16, r30
	TCNT1L = 0XFB;
	sei();
	insert this after execution of volatile insturcions
	*/
     while (1) {
		_tmp_=0x0000;
 8b0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x1>
 8b4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
	//Comment this out if you use interrupts
		cli();
 8b8:	f8 94       	cli
		hun=0;
 8ba:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <hun>
		mon=0;
 8be:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <mon>
		dec=0;
 8c2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <dec>
		sign = '+';
		temp = return_temp();
 8c6:	0e 94 c2 01 	call	0x384	; 0x384 <return_temp>
		if(temp == 0x8000){
 8ca:	81 15       	cp	r24, r1
 8cc:	b0 e8       	ldi	r27, 0x80	; 128
 8ce:	9b 07       	cpc	r25, r27
 8d0:	19 f4       	brne	.+6      	; 0x8d8 <main+0x116>
			no_device();
 8d2:	0e 94 ed 01 	call	0x3da	; 0x3da <no_device>
 8d6:	2a c0       	rjmp	.+84     	; 0x92c <main+0x16a>
		}
		else{
			sign_ext  = (temp >> 8) & 0x00FF;
			if(sign_ext ==  0xff){
 8d8:	9f 3f       	cpi	r25, 0xFF	; 255
 8da:	09 f4       	brne	.+2      	; 0x8de <main+0x11c>
 8dc:	5d c0       	rjmp	.+186    	; 0x998 <main+0x1d6>
			magnitude = temp & 0x00FF;
			if(sign == '-'){
				magnitude = ~(magnitude);
				magnitude = magnitude + 1;
			}
			get_digits(magnitude); 
 8de:	0e 94 0c 02 	call	0x418	; 0x418 <get_digits>
			trasmit_temp_usart(dec+0x30,mon+0x30);
 8e2:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <mon>
 8e6:	60 5d       	subi	r22, 0xD0	; 208
 8e8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <dec>
 8ec:	80 5d       	subi	r24, 0xD0	; 208
 8ee:	0e 94 b9 02 	call	0x572	; 0x572 <trasmit_temp_usart>
			memset(input_buffer,0,sizeof(input_buffer));
 8f2:	f8 01       	movw	r30, r16
 8f4:	2f 2d       	mov	r18, r15
 8f6:	11 92       	st	Z+, r1
 8f8:	2a 95       	dec	r18
 8fa:	e9 f7       	brne	.-6      	; 0x8f6 <main+0x134>
			usart_receive_string(input_buffer);
 8fc:	c8 01       	movw	r24, r16
 8fe:	0e 94 25 02 	call	0x44a	; 0x44a <usart_receive_string>
			if(strcmp(input_buffer,"Success")!= 0){
 902:	60 e6       	ldi	r22, 0x60	; 96
 904:	70 e0       	ldi	r23, 0x00	; 0
 906:	c8 01       	movw	r24, r16
 908:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 90c:	89 2b       	or	r24, r25
 90e:	21 f0       	breq	.+8      	; 0x918 <main+0x156>
				lcd_success('3');
 910:	83 e3       	ldi	r24, 0x33	; 51
 912:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_success>
 916:	0a c0       	rjmp	.+20     	; 0x92c <main+0x16a>
			}
			else if(strcmp(input_buffer,"Fail")!= 0){
 918:	68 e6       	ldi	r22, 0x68	; 104
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	c8 01       	movw	r24, r16
 91e:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 922:	89 2b       	or	r24, r25
 924:	19 f0       	breq	.+6      	; 0x92c <main+0x16a>
				lcd_fail('3');
 926:	83 e3       	ldi	r24, 0x33	; 51
 928:	0e 94 97 02 	call	0x52e	; 0x52e <lcd_fail>
 92c:	8f ef       	ldi	r24, 0xFF	; 255
 92e:	99 e6       	ldi	r25, 0x69	; 105
 930:	a8 e1       	ldi	r26, 0x18	; 24
 932:	81 50       	subi	r24, 0x01	; 1
 934:	90 40       	sbci	r25, 0x00	; 0
 936:	a0 40       	sbci	r26, 0x00	; 0
 938:	e1 f7       	brne	.-8      	; 0x932 <main+0x170>
 93a:	00 c0       	rjmp	.+0      	; 0x93c <main+0x17a>
 93c:	00 00       	nop
			}	 	 
		} 
		_delay_ms(1000);
		//Comment the following lines out if you use interrupts
		sei();
 93e:	78 94       	sei
		 
		team_number = keypad_to_ascii(scan_keypad_rising_edge());
 940:	0e 94 83 00 	call	0x106	; 0x106 <scan_keypad_rising_edge>
 944:	0e 94 a4 00 	call	0x148	; 0x148 <keypad_to_ascii>
		if(team_number=='9'){
 948:	89 33       	cpi	r24, 0x39	; 57
 94a:	21 f4       	brne	.+8      	; 0x954 <main+0x192>
			setup_team_status('T');
 94c:	84 e5       	ldi	r24, 0x54	; 84
 94e:	0e 94 3b 03 	call	0x676	; 0x676 <setup_team_status>
 952:	03 c0       	rjmp	.+6      	; 0x95a <main+0x198>
		}
		else{
			setup_team_status('F');
 954:	86 e4       	ldi	r24, 0x46	; 70
 956:	0e 94 3b 03 	call	0x676	; 0x676 <setup_team_status>
		}
		memset(input_buffer,0,sizeof(input_buffer));
 95a:	f8 01       	movw	r30, r16
 95c:	2f 2d       	mov	r18, r15
 95e:	11 92       	st	Z+, r1
 960:	2a 95       	dec	r18
 962:	e9 f7       	brne	.-6      	; 0x95e <main+0x19c>
		usart_receive_string(input_buffer);
 964:	c8 01       	movw	r24, r16
 966:	0e 94 25 02 	call	0x44a	; 0x44a <usart_receive_string>
		if(strcmp(input_buffer,"Success")!= 0){
 96a:	60 e6       	ldi	r22, 0x60	; 96
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	c8 01       	movw	r24, r16
 970:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 974:	89 2b       	or	r24, r25
 976:	21 f0       	breq	.+8      	; 0x980 <main+0x1be>
			lcd_success('4');
 978:	84 e3       	ldi	r24, 0x34	; 52
 97a:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_success>
 97e:	98 cf       	rjmp	.-208    	; 0x8b0 <main+0xee>
		}
		else if(strcmp(input_buffer,"Fail")!= 0){
 980:	68 e6       	ldi	r22, 0x68	; 104
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	c8 01       	movw	r24, r16
 986:	0e 94 ce 04 	call	0x99c	; 0x99c <strcmp>
 98a:	89 2b       	or	r24, r25
 98c:	09 f4       	brne	.+2      	; 0x990 <main+0x1ce>
 98e:	90 cf       	rjmp	.-224    	; 0x8b0 <main+0xee>
			lcd_fail('4');
 990:	84 e3       	ldi	r24, 0x34	; 52
 992:	0e 94 97 02 	call	0x52e	; 0x52e <lcd_fail>
 996:	8c cf       	rjmp	.-232    	; 0x8b0 <main+0xee>
				sign = '-';
			}
			magnitude = temp & 0x00FF;
			if(sign == '-'){
				magnitude = ~(magnitude);
				magnitude = magnitude + 1;
 998:	81 95       	neg	r24
 99a:	a1 cf       	rjmp	.-190    	; 0x8de <main+0x11c>

0000099c <strcmp>:
 99c:	fb 01       	movw	r30, r22
 99e:	dc 01       	movw	r26, r24
 9a0:	8d 91       	ld	r24, X+
 9a2:	01 90       	ld	r0, Z+
 9a4:	80 19       	sub	r24, r0
 9a6:	01 10       	cpse	r0, r1
 9a8:	d9 f3       	breq	.-10     	; 0x9a0 <strcmp+0x4>
 9aa:	99 0b       	sbc	r25, r25
 9ac:	08 95       	ret

000009ae <_exit>:
 9ae:	f8 94       	cli

000009b0 <__stop_program>:
 9b0:	ff cf       	rjmp	.-2      	; 0x9b0 <__stop_program>
